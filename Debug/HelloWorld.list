
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c18  08006c18  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08006c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  200000ec  08006d0c  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08006d0c  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d558  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002851  00000000  00000000  0002d674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  000309f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001807a  00000000  00000000  000313f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea2a  00000000  00000000  0004946a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008658e  00000000  00000000  00057e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000de474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000ec 	.word	0x200000ec
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b88 	.word	0x08006b88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000f0 	.word	0x200000f0
 80001d0:	08006b88 	.word	0x08006b88

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <pS>:
typedef enum {HIGH,LOW} pinState;	//This is an abstraction for GPIO_PIN_[RE]SET
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
pinState pS(GPIO_PinState s){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	if(s==GPIO_PIN_SET){return HIGH;}
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d101      	bne.n	80004ec <pS+0x14>
 80004e8:	2300      	movs	r3, #0
 80004ea:	e000      	b.n	80004ee <pS+0x16>
	return LOW;
 80004ec:	2301      	movs	r3, #1
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <writePin>:

void writePin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, pinState state){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	807b      	strh	r3, [r7, #2]
 8000506:	4613      	mov	r3, r2
 8000508:	707b      	strb	r3, [r7, #1]
	if(state == HIGH){
 800050a:	787b      	ldrb	r3, [r7, #1]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d106      	bne.n	800051e <writePin+0x24>
		HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_SET);
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fd1e 	bl	8000f58 <HAL_GPIO_WritePin>
		return;
 800051c:	e005      	b.n	800052a <writePin+0x30>
	}
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_RESET);
 800051e:	887b      	ldrh	r3, [r7, #2]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 fd17 	bl	8000f58 <HAL_GPIO_WritePin>
}
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <readPin>:

pinState readPin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
	return pS(HAL_GPIO_ReadPin(GPIOx,GPIO_Pin));
 800053c:	887b      	ldrh	r3, [r7, #2]
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 fcf1 	bl	8000f28 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffc5 	bl	80004d8 <pS>
 800054e:	4603      	mov	r3, r0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <flashLed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void flashLed(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	writePin(GPIOC,GPIO_PIN_13,LOW);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <flashLed+0x64>)
 8000564:	f7ff ffc9 	bl	80004fa <writePin>
	HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	; 0x64
 800056a:	f000 fa23 	bl	80009b4 <HAL_Delay>
	writePin(GPIOC,GPIO_PIN_13,HIGH);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <flashLed+0x64>)
 8000576:	f7ff ffc0 	bl	80004fa <writePin>
	HAL_Delay(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f000 fa1a 	bl	80009b4 <HAL_Delay>
	writePin(GPIOC,GPIO_PIN_13,LOW);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <flashLed+0x64>)
 8000588:	f7ff ffb7 	bl	80004fa <writePin>
	HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f000 fa11 	bl	80009b4 <HAL_Delay>
	writePin(GPIOC,GPIO_PIN_13,HIGH);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <flashLed+0x64>)
 800059a:	f7ff ffae 	bl	80004fa <writePin>
	HAL_Delay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 fa08 	bl	80009b4 <HAL_Delay>
	writePin(GPIOC,GPIO_PIN_13,LOW);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <flashLed+0x64>)
 80005ac:	f7ff ffa5 	bl	80004fa <writePin>
	HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f000 f9ff 	bl	80009b4 <HAL_Delay>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020800 	.word	0x40020800

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 f984 	bl	80008d0 <HAL_Init>
  //GPIO_PinState inPin;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f818 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f882 	bl	80006d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d0:	f005 fe44 	bl	800625c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  writePin(GPIOC,GPIO_PIN_13,LOW);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x34>)
 80005dc:	f7ff ff8d 	bl	80004fa <writePin>
  while (1)
  {

	  //HAL_Delay(100);

	  if(readPin(GPIOA,GPIO_PIN_7) == HIGH){
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <main+0x38>)
 80005e4:	f7ff ffa4 	bl	8000530 <readPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f8      	bne.n	80005e0 <main+0x20>
		  flashLed();
 80005ee:	f7ff ffb3 	bl	8000558 <flashLed>
	  if(readPin(GPIOA,GPIO_PIN_7) == HIGH){
 80005f2:	e7f5      	b.n	80005e0 <main+0x20>
 80005f4:	40020800 	.word	0x40020800
 80005f8:	40020000 	.word	0x40020000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 fab4 	bl	8006b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a28      	ldr	r2, [pc, #160]	; (80006cc <SystemClock_Config+0xd0>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd4>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000670:	2319      	movs	r3, #25
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fee4 	bl	8002454 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000692:	f000 f87f 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f946 	bl	8002944 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006be:	f000 f869 	bl	8000794 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xb4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xb4>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xb4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xb4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xb4>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xb4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xb4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xb4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xb4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPIN_GPIO_Port, LEDPIN_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_GPIO_Init+0xb8>)
 8000746:	f000 fc07 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDPIN_Pin */
  GPIO_InitStruct.Pin = LEDPIN_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDPIN_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <MX_GPIO_Init+0xb8>)
 8000764:	f000 fa5c 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Leftmost_Button___1_Pin Middle_Button___2_Pin Rightmost_Button___3_Pin */
  GPIO_InitStruct.Pin = Leftmost_Button___1_Pin|Middle_Button___2_Pin|Rightmost_Button___3_Pin;
 8000768:	23e0      	movs	r3, #224	; 0xe0
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_GPIO_Init+0xbc>)
 800077c:	f000 fa50 	bl	8000c20 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020800 	.word	0x40020800
 8000790:	40020000 	.word	0x40020000

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f89a 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <OTG_FS_IRQHandler+0x10>)
 800084a:	f000 fcee 	bl	800122a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200005ec 	.word	0x200005ec

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000898:	4c0b      	ldr	r4, [pc, #44]	; (80008c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008a6:	f7ff ffd7 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f006 f941 	bl	8006b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fe87 	bl	80005c0 <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80008c0:	08006c20 	.word	0x08006c20
  ldr r2, =_sbss
 80008c4:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80008c8:	20000b14 	.word	0x20000b14

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <HAL_Init+0x40>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_Init+0x40>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x40>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f94f 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff ff4c 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023c00 	.word	0x40023c00

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f967 	bl	8000c06 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f92f 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000108 	.word	0x20000108

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000108 	.word	0x20000108

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009da:	bf00      	nop
 80009dc:	f7ff ffde 	bl	800099c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff3e 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff31 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e159      	b.n	8000ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 8148 	bne.w	8000eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d130      	bne.n	8000cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f003 0201 	and.w	r2, r3, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d017      	beq.n	8000d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d123      	bne.n	8000d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0203 	and.w	r2, r3, #3
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80a2 	beq.w	8000eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a56      	ldr	r2, [pc, #344]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <HAL_GPIO_Init+0x2e8>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc2:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <HAL_GPIO_Init+0x2ec>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <HAL_GPIO_Init+0x2f0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x202>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2f4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x1fe>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2f8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x1fa>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2fc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x1f6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x1f2>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x204>
 8000e22:	2300      	movs	r3, #0
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e34:	4935      	ldr	r1, [pc, #212]	; (8000f0c <HAL_GPIO_Init+0x2ec>)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f67f aea2 	bls.w	8000c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8c:	b08f      	sub	sp, #60	; 0x3c
 8000f8e:	af0a      	add	r7, sp, #40	; 0x28
 8000f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e10f      	b.n	80011bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f005 fab8 	bl	800652c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 ff7f 	bl	8002ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	687e      	ldr	r6, [r7, #4]
 8000fe8:	466d      	mov	r5, sp
 8000fea:	f106 0410 	add.w	r4, r6, #16
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ffa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ffe:	1d33      	adds	r3, r6, #4
 8001000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f001 fe56 	bl	8002cb4 <USB_CoreInit>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0d0      	b.n	80011bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f001 ff6d 	bl	8002f00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e04a      	b.n	80010c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	333d      	adds	r3, #61	; 0x3d
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	333c      	adds	r3, #60	; 0x3c
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b298      	uxth	r0, r3
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3344      	adds	r3, #68	; 0x44
 8001068:	4602      	mov	r2, r0
 800106a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3340      	adds	r3, #64	; 0x40
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3348      	adds	r3, #72	; 0x48
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	334c      	adds	r3, #76	; 0x4c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3354      	adds	r3, #84	; 0x54
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	3301      	adds	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3af      	bcc.n	800102c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e044      	b.n	800115c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3b5      	bcc.n	80010d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	687e      	ldr	r6, [r7, #4]
 800116e:	466d      	mov	r5, sp
 8001170:	f106 0410 	add.w	r4, r6, #16
 8001174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001180:	e885 0003 	stmia.w	r5, {r0, r1}
 8001184:	1d33      	adds	r3, r6, #4
 8001186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 ff05 	bl	8002f98 <USB_DevInit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00d      	b.n	80011bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f854 	bl	8004262 <USB_DevDisconnect>

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_PCD_Start+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e020      	b.n	8001222 <HAL_PCD_Start+0x5e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d109      	bne.n	8001204 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fe57 	bl	8002ebc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f804 	bl	8004220 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b08d      	sub	sp, #52	; 0x34
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f8c2 	bl	80043ca <USB_GetMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 848a 	bne.w	8001b62 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f826 	bl	80042a4 <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8480 	beq.w	8001b60 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f813 	bl	80042a4 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f002 0202 	and.w	r2, r2, #2
 8001296:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f801 	bl	80042a4 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d161      	bne.n	8001370 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0210 	bic.w	r2, r2, #16
 80012ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 020f 	and.w	r2, r3, #15
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d124      	bne.n	8001332 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d035      	beq.n	8001360 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f002 fe38 	bl	8003f7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	621a      	str	r2, [r3, #32]
 8001330:	e016      	b.n	8001360 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	0c5b      	lsrs	r3, r3, #17
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	2b06      	cmp	r3, #6
 800133c:	d110      	bne.n	8001360 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001344:	2208      	movs	r2, #8
 8001346:	4619      	mov	r1, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f002 fe17 	bl	8003f7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 ff95 	bl	80042a4 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001384:	f040 80a7 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f002 ff9a 	bl	80042ca <USB_ReadDevAllOutEpInterrupt>
 8001396:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001398:	e099      	b.n	80014ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 808e 	beq.w	80014c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 ffbe 	bl	8004332 <USB_ReadDevOutEPInterrupt>
 80013b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 feaa 	bl	8002130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 ff80 	bl	8002300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2310      	movs	r3, #16
 800141a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	2b80      	cmp	r3, #128	; 0x80
 8001430:	d109      	bne.n	8001446 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001444:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2200      	movs	r2, #0
 8001468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 f961 	bl	8006738 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	2302      	movs	r3, #2
 8001486:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149e:	461a      	mov	r2, r3
 80014a0:	2320      	movs	r3, #32
 80014a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ba:	461a      	mov	r2, r3
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f af62 	bne.w	800139a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fee2 	bl	80042a4 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014ea:	f040 80db 	bne.w	80016a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 ff03 	bl	80042fe <USB_ReadDevAllInEpInterrupt>
 80014f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014fe:	e0cd      	b.n	800169c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80c2 	beq.w	8001690 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 ff29 	bl	800436e <USB_ReadDevInEPInterrupt>
 800151c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d057      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	2201      	movs	r2, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	69f9      	ldr	r1, [r7, #28]
 8001544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001548:	4013      	ands	r3, r2
 800154a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d132      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	334c      	adds	r3, #76	; 0x4c
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	3348      	adds	r3, #72	; 0x48
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4419      	add	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	334c      	adds	r3, #76	; 0x4c
 800159c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d113      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3354      	adds	r3, #84	; 0x54
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015c4:	461a      	mov	r2, r3
 80015c6:	2101      	movs	r1, #1
 80015c8:	f002 ff30 	bl	800442c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 f82b 	bl	800662e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2308      	movs	r3, #8
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2340      	movs	r3, #64	; 0x40
 800162a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f001 fe11 	bl	8003260 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3338      	adds	r3, #56	; 0x38
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f005 f878 	bl	800675c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2302      	movs	r3, #2
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fcc3 	bl	8002016 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f af2e 	bne.w	8001500 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fdfb 	bl	80042a4 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b8:	d122      	bne.n	8001700 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 feaa 	bl	800243c <HAL_PCDEx_LPM_Callback>
 80016e8:	e002      	b.n	80016f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 f816 	bl	800671c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fdcd 	bl	80042a4 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001714:	d112      	bne.n	800173c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f004 ffd2 	bl	80066d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800173a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fdaf 	bl	80042a4 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001750:	f040 80b7 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2110      	movs	r1, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fd76 	bl	8003260 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001778:	e046      	b.n	8001808 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001786:	461a      	mov	r2, r3
 8001788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800178c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179e:	0151      	lsls	r1, r2, #5
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	440a      	add	r2, r1
 80017a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d2:	0151      	lsls	r1, r2, #5
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	440a      	add	r2, r1
 80017d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001800:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	3301      	adds	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180e:	429a      	cmp	r2, r3
 8001810:	d3b3      	bcc.n	800177a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001820:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001824:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d016      	beq.n	800185c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183e:	f043 030b 	orr.w	r3, r3, #11
 8001842:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001854:	f043 030b 	orr.w	r3, r3, #11
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	e015      	b.n	8001888 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800186e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001872:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001882:	f043 030b 	orr.w	r3, r3, #11
 8001886:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001896:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800189a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ac:	461a      	mov	r2, r3
 80018ae:	f002 fdbd 	bl	800442c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fcec 	bl	80042a4 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d6:	d124      	bne.n	8001922 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fd82 	bl	80043e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fd37 	bl	800335a <USB_GetDevSpeed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	f001 f9d0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4620      	mov	r0, r4
 8001908:	f001 fa36 	bl	8002d78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f004 feb6 	bl	800667e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fcbc 	bl	80042a4 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b08      	cmp	r3, #8
 8001934:	d10a      	bne.n	800194c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f004 fe93 	bl	8006662 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f002 0208 	and.w	r2, r2, #8
 800194a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fca7 	bl	80042a4 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d122      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	e014      	b.n	800199c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fb0f 	bl	8001fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	3301      	adds	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3e5      	bcc.n	8001972 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fc7a 	bl	80042a4 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ba:	d13b      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	e02b      	b.n	8001a1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3340      	adds	r3, #64	; 0x40
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da12      	bge.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	333f      	adds	r3, #63	; 0x3f
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fad0 	bl	8001fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3301      	adds	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3ce      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fc33 	bl	80042a4 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a48:	d155      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	e045      	b.n	8001adc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d12e      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da2b      	bge.n	8001ad6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d121      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10a      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6053      	str	r3, [r2, #4]
            break;
 8001ad4:	e007      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3b4      	bcc.n	8001a50 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fbd2 	bl	80042a4 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d10a      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f004 fe37 	bl	8006780 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fbbc 	bl	80042a4 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d115      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f004 fe27 	bl	800679c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e000      	b.n	8001b62 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b60:	bf00      	nop
    }
  }
}
 8001b62:	3734      	adds	r7, #52	; 0x34
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_SetAddress+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e013      	b.n	8001baa <HAL_PCD_SetAddress+0x42>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fb1a 	bl	80041d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	70fb      	strb	r3, [r7, #3]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	803b      	strh	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0f      	bge.n	8001bf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3338      	adds	r3, #56	; 0x38
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	3304      	adds	r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	705a      	strb	r2, [r3, #1]
 8001bf6:	e00f      	b.n	8001c18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c24:	883a      	ldrh	r2, [r7, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	78ba      	ldrb	r2, [r7, #2]
 8001c2e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c42:	78bb      	ldrb	r3, [r7, #2]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d102      	bne.n	8001c4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_PCD_EP_Open+0xaa>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e00e      	b.n	8001c7a <HAL_PCD_EP_Open+0xc8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fb9a 	bl	80033a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c78:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da0f      	bge.n	8001cb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3338      	adds	r3, #56	; 0x38
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	705a      	strb	r2, [r3, #1]
 8001cb4:	e00f      	b.n	8001cd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_EP_Close+0x6e>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00e      	b.n	8001d0e <HAL_PCD_EP_Close+0x8c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fbd8 	bl	80034b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	f001 feb7 	bl	8003afc <USB_EP0StartXfer>
 8001d8e:	e008      	b.n	8001da2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	f001 fc65 	bl	800366c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	460b      	mov	r3, r1
 8001dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	3338      	adds	r3, #56	; 0x38
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2201      	movs	r2, #1
 8001dea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6979      	ldr	r1, [r7, #20]
 8001e1e:	f001 fe6d 	bl	8003afc <USB_EP0StartXfer>
 8001e22:	e008      	b.n	8001e36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6979      	ldr	r1, [r7, #20]
 8001e32:	f001 fc1b 	bl	800366c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d901      	bls.n	8001e5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e050      	b.n	8001f00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da0f      	bge.n	8001e86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	3338      	adds	r3, #56	; 0x38
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
 8001e84:	e00d      	b.n	8001ea2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_EP_SetStall+0x82>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e01e      	b.n	8001f00 <HAL_PCD_EP_SetStall+0xc0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 f8ab 	bl	800402c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	b2d9      	uxtb	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f002 fa9b 	bl	800442c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d901      	bls.n	8001f26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e042      	b.n	8001fac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0f      	bge.n	8001f4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3338      	adds	r3, #56	; 0x38
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00f      	b.n	8001f6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_EP_ClrStall+0x86>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e00e      	b.n	8001fac <HAL_PCD_EP_ClrStall+0xa4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 f8b3 	bl	8004108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da0c      	bge.n	8001fe2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	3338      	adds	r3, #56	; 0x38
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e00c      	b.n	8001ffc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	f001 fed2 	bl	8003dac <USB_EPStopXfer>
 8002008:	4603      	mov	r3, r0
 800200a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800200c:	7afb      	ldrb	r3, [r7, #11]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08a      	sub	sp, #40	; 0x28
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06c      	b.n	8002128 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d902      	bls.n	800206a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3303      	adds	r3, #3
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002072:	e02b      	b.n	80020cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3303      	adds	r3, #3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f001 ff26 	bl	8003f00 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d809      	bhi.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d203      	bcs.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1be      	bne.n	8002074 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d811      	bhi.n	8002126 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	2201      	movs	r2, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	43db      	mvns	r3, r3
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002122:	4013      	ands	r3, r2
 8002124:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	333c      	adds	r3, #60	; 0x3c
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d17b      	bne.n	800225e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a61      	ldr	r2, [pc, #388]	; (80022f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	f240 80b9 	bls.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80b3 	beq.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002198:	6093      	str	r3, [r2, #8]
 800219a:	e0a7      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	2320      	movs	r3, #32
 80021b6:	6093      	str	r3, [r2, #8]
 80021b8:	e098      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8093 	bne.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d90f      	bls.n	80021ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	e07e      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	440b      	add	r3, r1
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d114      	bne.n	8002250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	f002 f8f6 	bl	800442c <USB_EP0_OutStart>
 8002240:	e006      	b.n	8002250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	441a      	add	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f004 f9ce 	bl	80065f8 <HAL_PCD_DataOutStageCallback>
 800225c:	e046      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d124      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227c:	461a      	mov	r2, r3
 800227e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002282:	6093      	str	r3, [r2, #8]
 8002284:	e032      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	2320      	movs	r3, #32
 80022a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f004 f9a5 	bl	80065f8 <HAL_PCD_DataOutStageCallback>
 80022ae:	e01d      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d114      	bne.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d8:	461a      	mov	r2, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	f002 f8a6 	bl	800442c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f004 f986 	bl	80065f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	4f54300a 	.word	0x4f54300a
 80022fc:	4f54310a 	.word	0x4f54310a

08002300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	333c      	adds	r3, #60	; 0x3c
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d90e      	bls.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f004 f93d 	bl	80065d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90c      	bls.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002374:	461a      	mov	r2, r3
 8002376:	2101      	movs	r1, #1
 8002378:	f002 f858 	bl	800442c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	4f54300a 	.word	0x4f54300a

0800238c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023aa:	883b      	ldrh	r3, [r7, #0]
 80023ac:	0419      	lsls	r1, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
 80023b8:	e028      	b.n	800240c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00d      	b.n	80023ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3340      	adds	r3, #64	; 0x40
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ec      	bcc.n	80023ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023f4:	883b      	ldrh	r3, [r7, #0]
 80023f6:	0418      	lsls	r0, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	3b01      	subs	r3, #1
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4302      	orrs	r2, r0
 8002404:	3340      	adds	r3, #64	; 0x40
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e267      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00c      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e242      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6f      	ldr	r2, [pc, #444]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6c      	ldr	r2, [pc, #432]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a68      	ldr	r2, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fa46 	bl	800099c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fa42 	bl	800099c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e207      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fa32 	bl	800099c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fa2e 	bl	800099c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1f3      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c7      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe f9e7 	bl	800099c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe f9e3 	bl	800099c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a8      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4925      	ldr	r1, [pc, #148]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe f9c6 	bl	800099c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe f9c2 	bl	800099c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e187      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe f9a6 	bl	800099c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe f9a2 	bl	800099c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e167      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe f98f 	bl	800099c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e00e      	b.n	80026a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe f98b 	bl	800099c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d907      	bls.n	80026a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e150      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	42470000 	.word	0x42470000
 800269c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8097 	beq.w	80027e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a7c      	ldr	r2, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b7a      	ldr	r3, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a73      	ldr	r2, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe f94b 	bl	800099c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe f947 	bl	800099c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e10c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x2ea>
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x30c>
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5e      	ldr	r2, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a54      	ldr	r2, [pc, #336]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe f90c 	bl	800099c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe f908 	bl	800099c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0cb      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCC_OscConfig+0x334>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe f8f6 	bl	800099c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe f8f2 	bl	800099c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0b5      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ee      	bne.n	80027b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a1 	beq.w	8002934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d05c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d141      	bne.n	800288a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe f8c6 	bl	800099c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe f8c2 	bl	800099c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e087      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe f89b 	bl	800099c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe f897 	bl	800099c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e05c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x416>
 8002888:	e054      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe f884 	bl	800099c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe f880 	bl	800099c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e045      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
 80028b6:	e03d      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e038      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cc      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90c      	bls.n	8002980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d044      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e067      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4934      	ldr	r1, [pc, #208]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fd ffb2 	bl	800099c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fd ffae 	bl	800099c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20c      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd ff12 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08006c00 	.word	0x08006c00
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b090      	sub	sp, #64	; 0x40
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x40>
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f200 80a1 	bhi.w	8002c7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b48:	e09b      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b4e:	e098      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	627a      	str	r2, [r7, #36]	; 0x24
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7c:	fb03 f201 	mul.w	r2, r3, r1
 8002b80:	2300      	movs	r3, #0
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b90:	460a      	mov	r2, r1
 8002b92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b96:	4413      	add	r3, r2
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	61fa      	str	r2, [r7, #28]
 8002ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002baa:	f7fd fb13 	bl	80001d4 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb6:	e053      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	617a      	str	r2, [r7, #20]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bca:	f04f 0b00 	mov.w	fp, #0
 8002bce:	4652      	mov	r2, sl
 8002bd0:	465b      	mov	r3, fp
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bea:	eb63 090b 	sbc.w	r9, r3, fp
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c02:	ebb2 0408 	subs.w	r4, r2, r8
 8002c06:	eb63 0509 	sbc.w	r5, r3, r9
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	00eb      	lsls	r3, r5, #3
 8002c14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c18:	00e2      	lsls	r2, r4, #3
 8002c1a:	4614      	mov	r4, r2
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	eb14 030a 	adds.w	r3, r4, sl
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	eb45 030b 	adc.w	r3, r5, fp
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c36:	4629      	mov	r1, r5
 8002c38:	028b      	lsls	r3, r1, #10
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c40:	4621      	mov	r1, r4
 8002c42:	028a      	lsls	r2, r1, #10
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	60fa      	str	r2, [r7, #12]
 8002c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c54:	f7fd fabe 	bl	80001d4 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3740      	adds	r7, #64	; 0x40
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	017d7840 	.word	0x017d7840

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	f107 001c 	add.w	r0, r7, #28
 8002cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d122      	bne.n	8002d12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 fbee 	bl	80044e8 <USB_CoreReset>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e01a      	b.n	8002d48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 fbe2 	bl	80044e8 <USB_CoreReset>
 8002d24:	4603      	mov	r3, r0
 8002d26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
 8002d3a:	e005      	b.n	8002d48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10b      	bne.n	8002d66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f043 0206 	orr.w	r2, r3, #6
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d72:	b004      	add	sp, #16
 8002d74:	4770      	bx	lr
	...

08002d78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d165      	bne.n	8002e58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a41      	ldr	r2, [pc, #260]	; (8002e94 <USB_SetTurnaroundTime+0x11c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d906      	bls.n	8002da2 <USB_SetTurnaroundTime+0x2a>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a40      	ldr	r2, [pc, #256]	; (8002e98 <USB_SetTurnaroundTime+0x120>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d202      	bcs.n	8002da2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e062      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a3c      	ldr	r2, [pc, #240]	; (8002e98 <USB_SetTurnaroundTime+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d306      	bcc.n	8002db8 <USB_SetTurnaroundTime+0x40>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <USB_SetTurnaroundTime+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d202      	bcs.n	8002db8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002db2:	230e      	movs	r3, #14
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e057      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <USB_SetTurnaroundTime+0x124>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d306      	bcc.n	8002dce <USB_SetTurnaroundTime+0x56>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a37      	ldr	r2, [pc, #220]	; (8002ea0 <USB_SetTurnaroundTime+0x128>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d202      	bcs.n	8002dce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002dc8:	230d      	movs	r3, #13
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e04c      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a33      	ldr	r2, [pc, #204]	; (8002ea0 <USB_SetTurnaroundTime+0x128>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d306      	bcc.n	8002de4 <USB_SetTurnaroundTime+0x6c>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <USB_SetTurnaroundTime+0x12c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dde:	230c      	movs	r3, #12
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e041      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <USB_SetTurnaroundTime+0x12c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <USB_SetTurnaroundTime+0x82>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <USB_SetTurnaroundTime+0x130>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d802      	bhi.n	8002dfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002df4:	230b      	movs	r3, #11
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e036      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <USB_SetTurnaroundTime+0x130>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <USB_SetTurnaroundTime+0x98>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a29      	ldr	r2, [pc, #164]	; (8002eac <USB_SetTurnaroundTime+0x134>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d802      	bhi.n	8002e10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e02b      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a26      	ldr	r2, [pc, #152]	; (8002eac <USB_SetTurnaroundTime+0x134>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d906      	bls.n	8002e26 <USB_SetTurnaroundTime+0xae>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <USB_SetTurnaroundTime+0x138>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d202      	bcs.n	8002e26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e20:	2309      	movs	r3, #9
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e020      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <USB_SetTurnaroundTime+0x138>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d306      	bcc.n	8002e3c <USB_SetTurnaroundTime+0xc4>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <USB_SetTurnaroundTime+0x13c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e36:	2308      	movs	r3, #8
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e015      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <USB_SetTurnaroundTime+0x13c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d906      	bls.n	8002e52 <USB_SetTurnaroundTime+0xda>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <USB_SetTurnaroundTime+0x140>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d202      	bcs.n	8002e52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e00a      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e52:	2306      	movs	r3, #6
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e007      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e5e:	2309      	movs	r3, #9
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e001      	b.n	8002e68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e64:	2309      	movs	r3, #9
 8002e66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	00d8acbf 	.word	0x00d8acbf
 8002e98:	00e4e1c0 	.word	0x00e4e1c0
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	01067380 	.word	0x01067380
 8002ea4:	011a499f 	.word	0x011a499f
 8002ea8:	01312cff 	.word	0x01312cff
 8002eac:	014ca43f 	.word	0x014ca43f
 8002eb0:	016e3600 	.word	0x016e3600
 8002eb4:	01a6ab1f 	.word	0x01a6ab1f
 8002eb8:	01e84800 	.word	0x01e84800

08002ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f023 0201 	bic.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d115      	bne.n	8002f4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f7fd fd40 	bl	80009b4 <HAL_Delay>
      ms++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f001 fa45 	bl	80043ca <USB_GetMode>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d01e      	beq.n	8002f84 <USB_SetCurrentMode+0x84>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b31      	cmp	r3, #49	; 0x31
 8002f4a:	d9f0      	bls.n	8002f2e <USB_SetCurrentMode+0x2e>
 8002f4c:	e01a      	b.n	8002f84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7fd fd27 	bl	80009b4 <HAL_Delay>
      ms++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 fa2c 	bl	80043ca <USB_GetMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <USB_SetCurrentMode+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b31      	cmp	r3, #49	; 0x31
 8002f7c:	d9f0      	bls.n	8002f60 <USB_SetCurrentMode+0x60>
 8002f7e:	e001      	b.n	8002f84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e005      	b.n	8002f90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b32      	cmp	r3, #50	; 0x32
 8002f88:	d101      	bne.n	8002f8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f98:	b084      	sub	sp, #16
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	e009      	b.n	8002fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0e      	cmp	r3, #14
 8002fd0:	d9f2      	bls.n	8002fb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11c      	bne.n	8003012 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
 8003010:	e00b      	b.n	800302a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	4619      	mov	r1, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	461a      	mov	r2, r3
 8003046:	680b      	ldr	r3, [r1, #0]
 8003048:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f965 	bl	8003328 <USB_SetDevSpeed>
 800305e:	e008      	b.n	8003072 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003060:	2101      	movs	r1, #1
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f960 	bl	8003328 <USB_SetDevSpeed>
 8003068:	e003      	b.n	8003072 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800306a:	2103      	movs	r1, #3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f95b 	bl	8003328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003072:	2110      	movs	r1, #16
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8f3 	bl	8003260 <USB_FlushTxFifo>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f91f 	bl	80032c8 <USB_FlushRxFifo>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a6:	461a      	mov	r2, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e043      	b.n	8003146 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d4:	d118      	bne.n	8003108 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e8:	461a      	mov	r2, r3
 80030ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e013      	b.n	800311a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e008      	b.n	800311a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003114:	461a      	mov	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003126:	461a      	mov	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800313e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	3301      	adds	r3, #1
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3b7      	bcc.n	80030be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e043      	b.n	80031dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316a:	d118      	bne.n	800319e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e013      	b.n	80031b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e008      	b.n	80031b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2300      	movs	r3, #0
 80031ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	2300      	movs	r3, #0
 80031c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3301      	adds	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d3b7      	bcc.n	8003154 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003204:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <USB_DevInit+0x2c4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 0208 	orr.w	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800324c:	7dfb      	ldrb	r3, [r7, #23]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003258:	b004      	add	sp, #16
 800325a:	4770      	bx	lr
 800325c:	803c3800 	.word	0x803c3800

08003260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <USB_FlushTxFifo+0x64>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e01b      	b.n	80032b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	daf2      	bge.n	800326e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	019b      	lsls	r3, r3, #6
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <USB_FlushTxFifo+0x64>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e006      	b.n	80032b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d0f0      	beq.n	8003298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	00030d40 	.word	0x00030d40

080032c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <USB_FlushRxFifo+0x5c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e018      	b.n	8003318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	daf2      	bge.n	80032d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2210      	movs	r2, #16
 80032f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <USB_FlushRxFifo+0x5c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e006      	b.n	8003318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b10      	cmp	r3, #16
 8003314:	d0f0      	beq.n	80032f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	00030d40 	.word	0x00030d40

08003328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800335a:	b480      	push	{r7}
 800335c:	b087      	sub	sp, #28
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
 800337e:	e00a      	b.n	8003396 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d002      	beq.n	800338c <USB_GetDevSpeed+0x32>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d102      	bne.n	8003392 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800338c:	2302      	movs	r3, #2
 800338e:	75fb      	strb	r3, [r7, #23]
 8003390:	e001      	b.n	8003396 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003392:	230f      	movs	r3, #15
 8003394:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d13a      	bne.n	8003436 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033de:	4313      	orrs	r3, r2
 80033e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d155      	bne.n	80034a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003414:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	059b      	lsls	r3, r3, #22
 800341a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800341c:	4313      	orrs	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e036      	b.n	80034a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11a      	bne.n	80034a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	791b      	ldrb	r3, [r3, #4]
 8003488:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800348a:	430b      	orrs	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	440a      	add	r2, r1
 8003496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d161      	bne.n	8003594 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e6:	d11f      	bne.n	8003528 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003506:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003548:	4013      	ands	r3, r2
 800354a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356c:	4013      	ands	r3, r2
 800356e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	440b      	add	r3, r1
 8003586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358a:	4619      	mov	r1, r3
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <USB_DeactivateEndpoint+0x1b0>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
 8003592:	e060      	b.n	8003656 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035aa:	d11f      	bne.n	80035ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	43db      	mvns	r3, r3
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800360c:	4013      	ands	r3, r2
 800360e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	43db      	mvns	r3, r3
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003630:	4013      	ands	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0159      	lsls	r1, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	440b      	add	r3, r1
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	4619      	mov	r1, r3
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <USB_DeactivateEndpoint+0x1b4>)
 8003652:	4013      	ands	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	ec337800 	.word	0xec337800
 8003668:	eff37800 	.word	0xeff37800

0800366c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b01      	cmp	r3, #1
 800368a:	f040 815c 	bne.w	8003946 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d132      	bne.n	80036fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	0151      	lsls	r1, r2, #5
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	440a      	add	r2, r1
 80036ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f4:	0cdb      	lsrs	r3, r3, #19
 80036f6:	04db      	lsls	r3, r3, #19
 80036f8:	6113      	str	r3, [r2, #16]
 80036fa:	e074      	b.n	80037e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	440a      	add	r2, r1
 8003712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003716:	0cdb      	lsrs	r3, r3, #19
 8003718:	04db      	lsls	r3, r3, #19
 800371a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800373a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800373e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	440b      	add	r3, r1
 8003758:	1e59      	subs	r1, r3, #1
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003762:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003764:	4b9d      	ldr	r3, [pc, #628]	; (80039dc <USB_EPStartXfer+0x370>)
 8003766:	400b      	ands	r3, r1
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	0148      	lsls	r0, r1, #5
 800376c:	69f9      	ldr	r1, [r7, #28]
 800376e:	4401      	add	r1, r0
 8003770:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	0148      	lsls	r0, r1, #5
 8003792:	69f9      	ldr	r1, [r7, #28]
 8003794:	4401      	add	r1, r0
 8003796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	791b      	ldrb	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d11f      	bne.n	80037e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d14b      	bne.n	8003884 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d128      	bne.n	8003862 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d110      	bne.n	8003842 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e00f      	b.n	8003862 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e133      	b.n	8003aec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	791b      	ldrb	r3, [r3, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d015      	beq.n	80038d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 811b 	beq.w	8003aec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	69f9      	ldr	r1, [r7, #28]
 80038ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d2:	4313      	orrs	r3, r2
 80038d4:	634b      	str	r3, [r1, #52]	; 0x34
 80038d6:	e109      	b.n	8003aec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	0151      	lsls	r1, r2, #5
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	440a      	add	r2, r1
 80038fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e00f      	b.n	800392a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	0151      	lsls	r1, r2, #5
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	440a      	add	r2, r1
 8003920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6919      	ldr	r1, [r3, #16]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	b298      	uxth	r0, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4603      	mov	r3, r0
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fade 	bl	8003f00 <USB_WritePacket>
 8003944:	e0d2      	b.n	8003aec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	440a      	add	r2, r1
 800395c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003960:	0cdb      	lsrs	r3, r3, #19
 8003962:	04db      	lsls	r3, r3, #19
 8003964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003988:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d126      	bne.n	80039e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	0148      	lsls	r0, r1, #5
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	4401      	add	r1, r0
 80039b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039d6:	6113      	str	r3, [r2, #16]
 80039d8:	e03a      	b.n	8003a50 <USB_EPStartXfer+0x3e4>
 80039da:	bf00      	nop
 80039dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	1e5a      	subs	r2, r3, #1
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	8afa      	ldrh	r2, [r7, #22]
 80039fc:	fb03 f202 	mul.w	r2, r3, r2
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	04d9      	lsls	r1, r3, #19
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <USB_EPStartXfer+0x48c>)
 8003a18:	400b      	ands	r3, r1
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	0148      	lsls	r0, r1, #5
 8003a1e:	69f9      	ldr	r1, [r7, #28]
 8003a20:	4401      	add	r1, r0
 8003a22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	0148      	lsls	r0, r1, #5
 8003a44:	69f9      	ldr	r1, [r7, #28]
 8003a46:	4401      	add	r1, r0
 8003a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10d      	bne.n	8003a72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6919      	ldr	r1, [r3, #16]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	460a      	mov	r2, r1
 8003a70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	791b      	ldrb	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d128      	bne.n	8003acc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d110      	bne.n	8003aac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	0151      	lsls	r1, r2, #5
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e00f      	b.n	8003acc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	1ff80000 	.word	0x1ff80000

08003afc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 80ce 	bne.w	8003cba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d132      	bne.n	8003b8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b84:	0cdb      	lsrs	r3, r3, #19
 8003b86:	04db      	lsls	r3, r3, #19
 8003b88:	6113      	str	r3, [r2, #16]
 8003b8a:	e04e      	b.n	8003c2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba6:	0cdb      	lsrs	r3, r3, #19
 8003ba8:	04db      	lsls	r3, r3, #19
 8003baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d903      	bls.n	8003be4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	0148      	lsls	r0, r1, #5
 8003c1e:	6979      	ldr	r1, [r7, #20]
 8003c20:	4401      	add	r1, r0
 8003c22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c26:	4313      	orrs	r3, r2
 8003c28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d11e      	bne.n	8003c6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e097      	b.n	8003d9e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	0151      	lsls	r1, r2, #5
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	440a      	add	r2, r1
 8003c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8083 	beq.w	8003d9e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	634b      	str	r3, [r1, #52]	; 0x34
 8003cb8:	e071      	b.n	8003d9e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	0cdb      	lsrs	r3, r3, #19
 8003cd6:	04db      	lsls	r3, r3, #19
 8003cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4c:	6939      	ldr	r1, [r7, #16]
 8003d4e:	0148      	lsls	r0, r1, #5
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	4401      	add	r1, r0
 8003d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10d      	bne.n	8003d7e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d14a      	bne.n	8003e60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de2:	f040 8086 	bne.w	8003ef2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	7812      	ldrb	r2, [r2, #0]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3301      	adds	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d902      	bls.n	8003e44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
          break;
 8003e42:	e056      	b.n	8003ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5c:	d0e7      	beq.n	8003e2e <USB_EPStopXfer+0x82>
 8003e5e:	e048      	b.n	8003ef2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e78:	d13b      	bne.n	8003ef2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d902      	bls.n	8003ed8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ed6:	e00c      	b.n	8003ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef0:	d0e7      	beq.n	8003ec2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	460b      	mov	r3, r1
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d123      	bne.n	8003f6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f26:	88bb      	ldrh	r3, [r7, #4]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e018      	b.n	8003f66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	031a      	lsls	r2, r3, #12
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f40:	461a      	mov	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3301      	adds	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3e2      	bcc.n	8003f34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3724      	adds	r7, #36	; 0x24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	e014      	b.n	8003fd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	623b      	str	r3, [r7, #32]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d3e6      	bcc.n	8003fa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fda:	8bfb      	ldrh	r3, [r7, #30]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01e      	beq.n	800401e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	461a      	mov	r2, r3
 8003fec:	f107 0310 	add.w	r3, r7, #16
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	b2da      	uxtb	r2, r3
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	701a      	strb	r2, [r3, #0]
      i++;
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	3301      	adds	r3, #1
 800400a:	623b      	str	r3, [r7, #32]
      pDest++;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	3301      	adds	r3, #1
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004012:	8bfb      	ldrh	r3, [r7, #30]
 8004014:	3b01      	subs	r3, #1
 8004016:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004018:	8bfb      	ldrh	r3, [r7, #30]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ea      	bne.n	8003ff4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004020:	4618      	mov	r0, r3
 8004022:	372c      	adds	r7, #44	; 0x2c
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d12c      	bne.n	80040a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	db12      	blt.n	8004080 <USB_EPSetStall+0x54>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800407e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e02b      	b.n	80040fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db12      	blt.n	80040da <USB_EPSetStall+0xae>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00f      	beq.n	80040da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d128      	bne.n	8004176 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004142:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	791b      	ldrb	r3, [r3, #4]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d003      	beq.n	8004154 <USB_EPClearStall+0x4c>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	791b      	ldrb	r3, [r3, #4]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d138      	bne.n	80041c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e027      	b.n	80041c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004194:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d003      	beq.n	80041a6 <USB_EPClearStall+0x9e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	791b      	ldrb	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d10f      	bne.n	80041c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424e:	f023 0302 	bic.w	r3, r3, #2
 8004252:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800427c:	f023 0303 	bic.w	r3, r3, #3
 8004280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0c1b      	lsrs	r3, r3, #16
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	b29b      	uxth	r3, r3
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004360:	68bb      	ldr	r3, [r7, #8]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043bc:	68bb      	ldr	r3, [r7, #8]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0301 	and.w	r3, r3, #1
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004400:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004404:	f023 0307 	bic.w	r3, r3, #7
 8004408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	460b      	mov	r3, r1
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	333c      	adds	r3, #60	; 0x3c
 8004442:	3304      	adds	r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <USB_EP0_OutStart+0xb8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d90a      	bls.n	8004466 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004460:	d101      	bne.n	8004466 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e037      	b.n	80044d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004494:	f043 0318 	orr.w	r3, r3, #24
 8004498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10f      	bne.n	80044d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	4f54300a 	.word	0x4f54300a

080044e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <USB_CoreReset+0x64>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e01b      	b.n	800453e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	daf2      	bge.n	80044f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f043 0201 	orr.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <USB_CoreReset+0x64>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d0f0      	beq.n	800451e <USB_CoreReset+0x36>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	00030d40 	.word	0x00030d40

08004550 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800455c:	2018      	movs	r0, #24
 800455e:	f002 faa3 	bl	8006aa8 <USBD_static_malloc>
 8004562:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	32b0      	adds	r2, #176	; 0xb0
 8004574:	2100      	movs	r1, #0
 8004576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800457a:	2302      	movs	r3, #2
 800457c:	e08a      	b.n	8004694 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	32b0      	adds	r2, #176	; 0xb0
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	32b0      	adds	r2, #176	; 0xb0
 8004598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7c1b      	ldrb	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11b      	bne.n	80045e2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <USBD_CUSTOM_HID_Init+0x14c>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f003 020f 	and.w	r2, r3, #15
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3326      	adds	r3, #38	; 0x26
 80045c0:	2205      	movs	r2, #5
 80045c2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <USBD_CUSTOM_HID_Init+0x150>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80045dc:	2205      	movs	r2, #5
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	e01a      	b.n	8004618 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <USBD_CUSTOM_HID_Init+0x14c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3326      	adds	r3, #38	; 0x26
 80045f8:	2205      	movs	r2, #5
 80045fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <USBD_CUSTOM_HID_Init+0x150>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004614:	2205      	movs	r2, #5
 8004616:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <USBD_CUSTOM_HID_Init+0x14c>)
 800461a:	7819      	ldrb	r1, [r3, #0]
 800461c:	2302      	movs	r3, #2
 800461e:	2203      	movs	r2, #3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f002 f930 	bl	8006886 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <USBD_CUSTOM_HID_Init+0x14c>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	2201      	movs	r2, #1
 800463e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <USBD_CUSTOM_HID_Init+0x150>)
 8004642:	7819      	ldrb	r1, [r3, #0]
 8004644:	2302      	movs	r3, #2
 8004646:	2203      	movs	r2, #3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f002 f91c 	bl	8006886 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <USBD_CUSTOM_HID_Init+0x150>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f003 020f 	and.w	r2, r3, #15
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004666:	2201      	movs	r2, #1
 8004668:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	33b0      	adds	r3, #176	; 0xb0
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <USBD_CUSTOM_HID_Init+0x150>)
 8004686:	7819      	ldrb	r1, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	2302      	movs	r3, #2
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f002 f9e9 	bl	8006a64 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000086 	.word	0x20000086
 80046a0:	20000087 	.word	0x20000087

080046a4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80046b0:	4b37      	ldr	r3, [pc, #220]	; (8004790 <USBD_CUSTOM_HID_DeInit+0xec>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f002 f90b 	bl	80068d2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80046bc:	4b34      	ldr	r3, [pc, #208]	; (8004790 <USBD_CUSTOM_HID_DeInit+0xec>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3324      	adds	r3, #36	; 0x24
 80046d2:	2200      	movs	r2, #0
 80046d4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <USBD_CUSTOM_HID_DeInit+0xec>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3326      	adds	r3, #38	; 0x26
 80046ec:	2200      	movs	r2, #0
 80046ee:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80046f0:	4b28      	ldr	r3, [pc, #160]	; (8004794 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f002 f8eb 	bl	80068d2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f003 020f 	and.w	r2, r3, #15
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004714:	2200      	movs	r2, #0
 8004716:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004718:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	32b0      	adds	r2, #176	; 0xb0
 800473e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01f      	beq.n	8004786 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	33b0      	adds	r3, #176	; 0xb0
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	32b0      	adds	r2, #176	; 0xb0
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	4618      	mov	r0, r3
 800476a:	f002 f9ab 	bl	8006ac4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	32b0      	adds	r2, #176	; 0xb0
 8004778:	2100      	movs	r1, #0
 800477a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000086 	.word	0x20000086
 8004794:	20000087 	.word	0x20000087

08004798 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	32b0      	adds	r2, #176	; 0xb0
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0f8      	b.n	80049be <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d056      	beq.n	8004886 <USBD_CUSTOM_HID_Setup+0xee>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	f040 80e8 	bne.w	80049ae <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	3b02      	subs	r3, #2
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d846      	bhi.n	8004876 <USBD_CUSTOM_HID_Setup+0xde>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <USBD_CUSTOM_HID_Setup+0x58>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004849 	.word	0x08004849
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004877 	.word	0x08004877
 80047fc:	08004877 	.word	0x08004877
 8004800:	08004877 	.word	0x08004877
 8004804:	08004877 	.word	0x08004877
 8004808:	08004877 	.word	0x08004877
 800480c:	08004859 	.word	0x08004859
 8004810:	08004837 	.word	0x08004837
 8004814:	08004819 	.word	0x08004819
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	885b      	ldrh	r3, [r3, #2]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]
          break;
 8004824:	e02e      	b.n	8004884 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3304      	adds	r3, #4
 800482a:	2201      	movs	r2, #1
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fc94 	bl	800615c <USBD_CtlSendData>
          break;
 8004834:	e026      	b.n	8004884 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	885b      	ldrh	r3, [r3, #2]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]
          break;
 8004846:	e01d      	b.n	8004884 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3308      	adds	r3, #8
 800484c:	2201      	movs	r2, #1
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 fc83 	bl	800615c <USBD_CtlSendData>
          break;
 8004856:	e015      	b.n	8004884 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2201      	movs	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800485e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	88db      	ldrh	r3, [r3, #6]
 8004864:	2b02      	cmp	r3, #2
 8004866:	bf28      	it	cs
 8004868:	2302      	movcs	r3, #2
 800486a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800486c:	461a      	mov	r2, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 fca0 	bl	80061b4 <USBD_CtlPrepareRx>
          break;
 8004874:	e006      	b.n	8004884 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 fbfe 	bl	800607a <USBD_CtlError>
          ret = USBD_FAIL;
 800487e:	2303      	movs	r3, #3
 8004880:	75fb      	strb	r3, [r7, #23]
          break;
 8004882:	bf00      	nop
      }
      break;
 8004884:	e09a      	b.n	80049bc <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	2b0b      	cmp	r3, #11
 800488c:	f200 8086 	bhi.w	800499c <USBD_CUSTOM_HID_Setup+0x204>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <USBD_CUSTOM_HID_Setup+0x100>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080049ab 	.word	0x080049ab
 80048a0:	0800499d 	.word	0x0800499d
 80048a4:	0800499d 	.word	0x0800499d
 80048a8:	0800499d 	.word	0x0800499d
 80048ac:	0800499d 	.word	0x0800499d
 80048b0:	080048f3 	.word	0x080048f3
 80048b4:	0800499d 	.word	0x0800499d
 80048b8:	0800499d 	.word	0x0800499d
 80048bc:	0800499d 	.word	0x0800499d
 80048c0:	0800494b 	.word	0x0800494b
 80048c4:	08004975 	.word	0x08004975
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d107      	bne.n	80048e4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80048d4:	f107 030e 	add.w	r3, r7, #14
 80048d8:	2202      	movs	r2, #2
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 fc3d 	bl	800615c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048e2:	e063      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fbc7 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 80048ec:	2303      	movs	r3, #3
 80048ee:	75fb      	strb	r3, [r7, #23]
          break;
 80048f0:	e05c      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	885b      	ldrh	r3, [r3, #2]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b22      	cmp	r3, #34	; 0x22
 80048fc:	d110      	bne.n	8004920 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	88db      	ldrh	r3, [r3, #6]
 8004902:	2b02      	cmp	r3, #2
 8004904:	bf28      	it	cs
 8004906:	2302      	movcs	r3, #2
 8004908:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	33b0      	adds	r3, #176	; 0xb0
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e00d      	b.n	800493c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	885b      	ldrh	r3, [r3, #2]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b21      	cmp	r3, #33	; 0x21
 800492a:	d107      	bne.n	800493c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <USBD_CUSTOM_HID_Setup+0x230>)
 800492e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	88db      	ldrh	r3, [r3, #6]
 8004934:	2b09      	cmp	r3, #9
 8004936:	bf28      	it	cs
 8004938:	2309      	movcs	r3, #9
 800493a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800493c:	8bfb      	ldrh	r3, [r7, #30]
 800493e:	461a      	mov	r2, r3
 8004940:	69b9      	ldr	r1, [r7, #24]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 fc0a 	bl	800615c <USBD_CtlSendData>
          break;
 8004948:	e030      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	330c      	adds	r3, #12
 800495a:	2201      	movs	r2, #1
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f001 fbfc 	bl	800615c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004964:	e022      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 fb86 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 800496e:	2303      	movs	r3, #3
 8004970:	75fb      	strb	r3, [r7, #23]
          break;
 8004972:	e01b      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b03      	cmp	r3, #3
 800497e:	d106      	bne.n	800498e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	885b      	ldrh	r3, [r3, #2]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800498c:	e00e      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fb72 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 8004996:	2303      	movs	r3, #3
 8004998:	75fb      	strb	r3, [r7, #23]
          break;
 800499a:	e007      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 fb6b 	bl	800607a <USBD_CtlError>
          ret = USBD_FAIL;
 80049a4:	2303      	movs	r3, #3
 80049a6:	75fb      	strb	r3, [r7, #23]
          break;
 80049a8:	e000      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80049aa:	bf00      	nop
      }
      break;
 80049ac:	e006      	b.n	80049bc <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fb62 	bl	800607a <USBD_CtlError>
      ret = USBD_FAIL;
 80049b6:	2303      	movs	r3, #3
 80049b8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ba:	bf00      	nop
  }
  return (uint8_t)ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000070 	.word	0x20000070

080049cc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80049d4:	2181      	movs	r1, #129	; 0x81
 80049d6:	4815      	ldr	r0, [pc, #84]	; (8004a2c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80049d8:	f000 fd17 	bl	800540a <USBD_GetEpDesc>
 80049dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80049de:	2101      	movs	r1, #1
 80049e0:	4812      	ldr	r0, [pc, #72]	; (8004a2c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80049e2:	f000 fd12 	bl	800540a <USBD_GetEpDesc>
 80049e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f042 0202 	orr.w	r2, r2, #2
 80049f6:	711a      	strb	r2, [r3, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2205      	movs	r2, #5
 8004a00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f042 0202 	orr.w	r2, r2, #2
 8004a10:	711a      	strb	r2, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2229      	movs	r2, #41	; 0x29
 8004a20:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004a22:	4b02      	ldr	r3, [pc, #8]	; (8004a2c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000044 	.word	0x20000044

08004a30 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004a38:	2181      	movs	r1, #129	; 0x81
 8004a3a:	4815      	ldr	r0, [pc, #84]	; (8004a90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004a3c:	f000 fce5 	bl	800540a <USBD_GetEpDesc>
 8004a40:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004a42:	2101      	movs	r1, #1
 8004a44:	4812      	ldr	r0, [pc, #72]	; (8004a90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004a46:	f000 fce0 	bl	800540a <USBD_GetEpDesc>
 8004a4a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f042 0202 	orr.w	r2, r2, #2
 8004a5a:	711a      	strb	r2, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2205      	movs	r2, #5
 8004a64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f042 0202 	orr.w	r2, r2, #2
 8004a74:	711a      	strb	r2, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2205      	movs	r2, #5
 8004a7e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2229      	movs	r2, #41	; 0x29
 8004a84:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004a86:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000044 	.word	0x20000044

08004a94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004a9c:	2181      	movs	r1, #129	; 0x81
 8004a9e:	4815      	ldr	r0, [pc, #84]	; (8004af4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004aa0:	f000 fcb3 	bl	800540a <USBD_GetEpDesc>
 8004aa4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4812      	ldr	r0, [pc, #72]	; (8004af4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004aaa:	f000 fcae 	bl	800540a <USBD_GetEpDesc>
 8004aae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f042 0202 	orr.w	r2, r2, #2
 8004abe:	711a      	strb	r2, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f042 0202 	orr.w	r2, r2, #2
 8004ad8:	711a      	strb	r2, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2229      	movs	r2, #41	; 0x29
 8004ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004aea:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000044 	.word	0x20000044

08004af8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	32b0      	adds	r2, #176	; 0xb0
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	2200      	movs	r2, #0
 8004b14:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	32b0      	adds	r2, #176	; 0xb0
 8004b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e017      	b.n	8004b76 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	32b0      	adds	r2, #176	; 0xb0
 8004b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	33b0      	adds	r3, #176	; 0xb0
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	7810      	ldrb	r0, [r2, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	7852      	ldrb	r2, [r2, #1]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	32b0      	adds	r2, #176	; 0xb0
 8004b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e00f      	b.n	8004bbe <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	32b0      	adds	r2, #176	; 0xb0
 8004ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8004bb0:	7819      	ldrb	r1, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 ff54 	bl	8006a64 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000087 	.word	0x20000087

08004bcc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	32b0      	adds	r2, #176	; 0xb0
 8004bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e016      	b.n	8004c1c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d111      	bne.n	8004c1a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	33b0      	adds	r3, #176	; 0xb0
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	7810      	ldrb	r0, [r2, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	7852      	ldrb	r2, [r2, #1]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	220a      	movs	r2, #10
 8004c30:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	2000007c 	.word	0x2000007c

08004c44 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e009      	b.n	8004c6c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	33b0      	adds	r3, #176	; 0xb0
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e01f      	b.n	8004cd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	79fa      	ldrb	r2, [r7, #7]
 8004cc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f001 fd77 	bl	80067b8 <USBD_LL_Init>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e025      	b.n	8004d3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	32ae      	adds	r2, #174	; 0xae
 8004d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00f      	beq.n	8004d2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	32ae      	adds	r2, #174	; 0xae
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f107 020e 	add.w	r2, r7, #14
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 fd7f 	bl	8006850 <USBD_LL_Start>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	4611      	mov	r1, r2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 f908 	bl	8006006 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d01a      	beq.n	8004e50 <USBD_LL_SetupStage+0x72>
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d822      	bhi.n	8004e64 <USBD_LL_SetupStage+0x86>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <USBD_LL_SetupStage+0x4a>
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d00a      	beq.n	8004e3c <USBD_LL_SetupStage+0x5e>
 8004e26:	e01d      	b.n	8004e64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fb5f 	bl	80054f4 <USBD_StdDevReq>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	e020      	b.n	8004e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbc7 	bl	80055d8 <USBD_StdItfReq>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4e:	e016      	b.n	8004e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc29 	bl	80056b0 <USBD_StdEPReq>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
      break;
 8004e62:	e00c      	b.n	8004e7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fd4c 	bl	8006910 <USBD_LL_StallEP>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7c:	bf00      	nop
  }

  return ret;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	460b      	mov	r3, r1
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d16e      	bne.n	8004f7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ea6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	f040 8098 	bne.w	8004fe4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d913      	bls.n	8004ee8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	1ad2      	subs	r2, r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bf28      	it	cs
 8004eda:	4613      	movcs	r3, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f001 f984 	bl	80061ee <USBD_CtlContinueRx>
 8004ee6:	e07d      	b.n	8004fe4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d014      	beq.n	8004f20 <USBD_LL_DataOutStage+0x98>
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d81d      	bhi.n	8004f36 <USBD_LL_DataOutStage+0xae>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <USBD_LL_DataOutStage+0x7c>
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d003      	beq.n	8004f0a <USBD_LL_DataOutStage+0x82>
 8004f02:	e018      	b.n	8004f36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75bb      	strb	r3, [r7, #22]
            break;
 8004f08:	e018      	b.n	8004f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	4619      	mov	r1, r3
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fa5e 	bl	80053d6 <USBD_CoreFindIF>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75bb      	strb	r3, [r7, #22]
            break;
 8004f1e:	e00d      	b.n	8004f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa60 	bl	80053f0 <USBD_CoreFindEP>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75bb      	strb	r3, [r7, #22]
            break;
 8004f34:	e002      	b.n	8004f3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75bb      	strb	r3, [r7, #22]
            break;
 8004f3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f3c:	7dbb      	ldrb	r3, [r7, #22]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d113      	bne.n	8004f76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f4e:	7dba      	ldrb	r2, [r7, #22]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	32ae      	adds	r2, #174	; 0xae
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f5e:	7dba      	ldrb	r2, [r7, #22]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f66:	7dba      	ldrb	r2, [r7, #22]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	32ae      	adds	r2, #174	; 0xae
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f001 f94a 	bl	8006210 <USBD_CtlSendStatus>
 8004f7c:	e032      	b.n	8004fe4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4619      	mov	r1, r3
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fa31 	bl	80053f0 <USBD_CoreFindEP>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f92:	7dbb      	ldrb	r3, [r7, #22]
 8004f94:	2bff      	cmp	r3, #255	; 0xff
 8004f96:	d025      	beq.n	8004fe4 <USBD_LL_DataOutStage+0x15c>
 8004f98:	7dbb      	ldrb	r3, [r7, #22]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d122      	bne.n	8004fe4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d117      	bne.n	8004fda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004faa:	7dba      	ldrb	r2, [r7, #22]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	32ae      	adds	r2, #174	; 0xae
 8004fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004fba:	7dba      	ldrb	r2, [r7, #22]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004fc2:	7dba      	ldrb	r2, [r7, #22]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	32ae      	adds	r2, #174	; 0xae
 8004fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	7afa      	ldrb	r2, [r7, #11]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	4798      	blx	r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	e000      	b.n	8004fe6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d16f      	bne.n	80050e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3314      	adds	r3, #20
 8005006:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800500e:	2b02      	cmp	r3, #2
 8005010:	d15a      	bne.n	80050c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	429a      	cmp	r2, r3
 800501c:	d914      	bls.n	8005048 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	461a      	mov	r2, r3
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f001 f8ac 	bl	8006192 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800503a:	2300      	movs	r3, #0
 800503c:	2200      	movs	r2, #0
 800503e:	2100      	movs	r1, #0
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f001 fd0f 	bl	8006a64 <USBD_LL_PrepareReceive>
 8005046:	e03f      	b.n	80050c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d11c      	bne.n	800508e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800505c:	429a      	cmp	r2, r3
 800505e:	d316      	bcc.n	800508e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800506a:	429a      	cmp	r2, r3
 800506c:	d20f      	bcs.n	800508e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f001 f88d 	bl	8006192 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005080:	2300      	movs	r3, #0
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f001 fcec 	bl	8006a64 <USBD_LL_PrepareReceive>
 800508c:	e01c      	b.n	80050c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d10f      	bne.n	80050ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f001 fc27 	bl	8006910 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f001 f8b7 	bl	8006236 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03a      	beq.n	8005148 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fe42 	bl	8004d5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80050e0:	e032      	b.n	8005148 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f97f 	bl	80053f0 <USBD_CoreFindEP>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2bff      	cmp	r3, #255	; 0xff
 80050fa:	d025      	beq.n	8005148 <USBD_LL_DataInStage+0x15a>
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d122      	bne.n	8005148 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b03      	cmp	r3, #3
 800510c:	d11c      	bne.n	8005148 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800510e:	7dfa      	ldrb	r2, [r7, #23]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	32ae      	adds	r2, #174	; 0xae
 8005114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800511e:	7dfa      	ldrb	r2, [r7, #23]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005126:	7dfa      	ldrb	r2, [r7, #23]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	32ae      	adds	r2, #174	; 0xae
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	7afa      	ldrb	r2, [r7, #11]
 8005134:	4611      	mov	r1, r2
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	4798      	blx	r3
 800513a:	4603      	mov	r3, r0
 800513c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800513e:	7dbb      	ldrb	r3, [r7, #22]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005144:	7dbb      	ldrb	r3, [r7, #22]
 8005146:	e000      	b.n	800514a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d014      	beq.n	80051b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6852      	ldr	r2, [r2, #4]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	4611      	mov	r1, r2
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80051b4:	2303      	movs	r3, #3
 80051b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051b8:	2340      	movs	r3, #64	; 0x40
 80051ba:	2200      	movs	r2, #0
 80051bc:	2100      	movs	r1, #0
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 fb61 	bl	8006886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051d4:	2340      	movs	r3, #64	; 0x40
 80051d6:	2200      	movs	r2, #0
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fb53 	bl	8006886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2240      	movs	r2, #64	; 0x40
 80051ea:	621a      	str	r2, [r3, #32]

  return ret;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005224:	b2da      	uxtb	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2204      	movs	r2, #4
 8005230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b04      	cmp	r3, #4
 8005254:	d106      	bne.n	8005264 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800525c:	b2da      	uxtb	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d110      	bne.n	80052a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	32ae      	adds	r2, #174	; 0xae
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e01c      	b.n	800530e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d115      	bne.n	800530c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32ae      	adds	r2, #174	; 0xae
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	32ae      	adds	r2, #174	; 0xae
 80052fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	4611      	mov	r1, r2
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	32ae      	adds	r2, #174	; 0xae
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005334:	2303      	movs	r3, #3
 8005336:	e01c      	b.n	8005372 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b03      	cmp	r3, #3
 8005342:	d115      	bne.n	8005370 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32ae      	adds	r2, #174	; 0xae
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	32ae      	adds	r2, #174	; 0xae
 8005362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	4611      	mov	r1, r2
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6852      	ldr	r2, [r2, #4]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	4611      	mov	r1, r2
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80053c8:	2303      	movs	r3, #3
 80053ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	885b      	ldrh	r3, [r3, #2]
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	429a      	cmp	r2, r3
 8005430:	d920      	bls.n	8005474 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800543a:	e013      	b.n	8005464 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800543c:	f107 030a 	add.w	r3, r7, #10
 8005440:	4619      	mov	r1, r3
 8005442:	6978      	ldr	r0, [r7, #20]
 8005444:	f000 f81b 	bl	800547e <USBD_GetNextDesc>
 8005448:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b05      	cmp	r3, #5
 8005450:	d108      	bne.n	8005464 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	429a      	cmp	r2, r3
 800545e:	d008      	beq.n	8005472 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	885b      	ldrh	r3, [r3, #2]
 8005468:	b29a      	uxth	r2, r3
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	429a      	cmp	r2, r3
 800546e:	d8e5      	bhi.n	800543c <USBD_GetEpDesc+0x32>
 8005470:	e000      	b.n	8005474 <USBD_GetEpDesc+0x6a>
          break;
 8005472:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005474:	693b      	ldr	r3, [r7, #16]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	881a      	ldrh	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	4413      	add	r3, r2
 8005498:	b29a      	uxth	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80054aa:	68fb      	ldr	r3, [r7, #12]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80054d6:	8a3b      	ldrh	r3, [r7, #16]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	b21a      	sxth	r2, r3
 80054dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b21b      	sxth	r3, r3
 80054e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054e6:	89fb      	ldrh	r3, [r7, #14]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d005      	beq.n	800551a <USBD_StdDevReq+0x26>
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d857      	bhi.n	80055c2 <USBD_StdDevReq+0xce>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00f      	beq.n	8005536 <USBD_StdDevReq+0x42>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d153      	bne.n	80055c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	32ae      	adds	r2, #174	; 0xae
 8005524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
      break;
 8005534:	e04a      	b.n	80055cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b09      	cmp	r3, #9
 800553c:	d83b      	bhi.n	80055b6 <USBD_StdDevReq+0xc2>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <USBD_StdDevReq+0x50>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005599 	.word	0x08005599
 8005548:	080055ad 	.word	0x080055ad
 800554c:	080055b7 	.word	0x080055b7
 8005550:	080055a3 	.word	0x080055a3
 8005554:	080055b7 	.word	0x080055b7
 8005558:	08005577 	.word	0x08005577
 800555c:	0800556d 	.word	0x0800556d
 8005560:	080055b7 	.word	0x080055b7
 8005564:	0800558f 	.word	0x0800558f
 8005568:	08005581 	.word	0x08005581
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa3c 	bl	80059ec <USBD_GetDescriptor>
          break;
 8005574:	e024      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fba1 	bl	8005cc0 <USBD_SetAddress>
          break;
 800557e:	e01f      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fbe0 	bl	8005d48 <USBD_SetConfig>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
          break;
 800558c:	e018      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fc83 	bl	8005e9c <USBD_GetConfig>
          break;
 8005596:	e013      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fcb4 	bl	8005f08 <USBD_GetStatus>
          break;
 80055a0:	e00e      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fce3 	bl	8005f70 <USBD_SetFeature>
          break;
 80055aa:	e009      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fd07 	bl	8005fc2 <USBD_ClrFeature>
          break;
 80055b4:	e004      	b.n	80055c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fd5e 	bl	800607a <USBD_CtlError>
          break;
 80055be:	bf00      	nop
      }
      break;
 80055c0:	e004      	b.n	80055cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fd58 	bl	800607a <USBD_CtlError>
      break;
 80055ca:	bf00      	nop
  }

  return ret;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d005      	beq.n	80055fe <USBD_StdItfReq+0x26>
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d852      	bhi.n	800569c <USBD_StdItfReq+0xc4>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <USBD_StdItfReq+0x26>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d14e      	bne.n	800569c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005604:	b2db      	uxtb	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	2b02      	cmp	r3, #2
 800560a:	d840      	bhi.n	800568e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	889b      	ldrh	r3, [r3, #4]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d836      	bhi.n	8005684 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	889b      	ldrh	r3, [r3, #4]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fed9 	bl	80053d6 <USBD_CoreFindIF>
 8005624:	4603      	mov	r3, r0
 8005626:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2bff      	cmp	r3, #255	; 0xff
 800562c:	d01d      	beq.n	800566a <USBD_StdItfReq+0x92>
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11a      	bne.n	800566a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005634:	7bba      	ldrb	r2, [r7, #14]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	32ae      	adds	r2, #174	; 0xae
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00f      	beq.n	8005664 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005644:	7bba      	ldrb	r2, [r7, #14]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800564c:	7bba      	ldrb	r2, [r7, #14]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	32ae      	adds	r2, #174	; 0xae
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005662:	e004      	b.n	800566e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005664:	2303      	movs	r3, #3
 8005666:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005668:	e001      	b.n	800566e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	88db      	ldrh	r3, [r3, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d110      	bne.n	8005698 <USBD_StdItfReq+0xc0>
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fdc7 	bl	8006210 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005682:	e009      	b.n	8005698 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fcf7 	bl	800607a <USBD_CtlError>
          break;
 800568c:	e004      	b.n	8005698 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fcf2 	bl	800607a <USBD_CtlError>
          break;
 8005696:	e000      	b.n	800569a <USBD_StdItfReq+0xc2>
          break;
 8005698:	bf00      	nop
      }
      break;
 800569a:	e004      	b.n	80056a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fceb 	bl	800607a <USBD_CtlError>
      break;
 80056a4:	bf00      	nop
  }

  return ret;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	889b      	ldrh	r3, [r3, #4]
 80056c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <USBD_StdEPReq+0x30>
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	f200 817f 	bhi.w	80059d4 <USBD_StdEPReq+0x324>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02a      	beq.n	8005730 <USBD_StdEPReq+0x80>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	f040 817a 	bne.w	80059d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fe83 	bl	80053f0 <USBD_CoreFindEP>
 80056ea:	4603      	mov	r3, r0
 80056ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056ee:	7b7b      	ldrb	r3, [r7, #13]
 80056f0:	2bff      	cmp	r3, #255	; 0xff
 80056f2:	f000 8174 	beq.w	80059de <USBD_StdEPReq+0x32e>
 80056f6:	7b7b      	ldrb	r3, [r7, #13]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8170 	bne.w	80059de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80056fe:	7b7a      	ldrb	r2, [r7, #13]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005706:	7b7a      	ldrb	r2, [r7, #13]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	32ae      	adds	r2, #174	; 0xae
 800570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8163 	beq.w	80059de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005718:	7b7a      	ldrb	r2, [r7, #13]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	32ae      	adds	r2, #174	; 0xae
 800571e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800572e:	e156      	b.n	80059de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d008      	beq.n	800574a <USBD_StdEPReq+0x9a>
 8005738:	2b03      	cmp	r3, #3
 800573a:	f300 8145 	bgt.w	80059c8 <USBD_StdEPReq+0x318>
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 809b 	beq.w	800587a <USBD_StdEPReq+0x1ca>
 8005744:	2b01      	cmp	r3, #1
 8005746:	d03c      	beq.n	80057c2 <USBD_StdEPReq+0x112>
 8005748:	e13e      	b.n	80059c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d002      	beq.n	800575c <USBD_StdEPReq+0xac>
 8005756:	2b03      	cmp	r3, #3
 8005758:	d016      	beq.n	8005788 <USBD_StdEPReq+0xd8>
 800575a:	e02c      	b.n	80057b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <USBD_StdEPReq+0xce>
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d00a      	beq.n	800577e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 f8cf 	bl	8006910 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f8cb 	bl	8006910 <USBD_LL_StallEP>
 800577a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800577c:	e020      	b.n	80057c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fc7a 	bl	800607a <USBD_CtlError>
              break;
 8005786:	e01b      	b.n	80057c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10e      	bne.n	80057ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <USBD_StdEPReq+0xfe>
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d008      	beq.n	80057ae <USBD_StdEPReq+0xfe>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	88db      	ldrh	r3, [r3, #6]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f8b1 	bl	8006910 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fd2e 	bl	8006210 <USBD_CtlSendStatus>

              break;
 80057b4:	e004      	b.n	80057c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fc5e 	bl	800607a <USBD_CtlError>
              break;
 80057be:	bf00      	nop
          }
          break;
 80057c0:	e107      	b.n	80059d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d002      	beq.n	80057d4 <USBD_StdEPReq+0x124>
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d016      	beq.n	8005800 <USBD_StdEPReq+0x150>
 80057d2:	e04b      	b.n	800586c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <USBD_StdEPReq+0x146>
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d00a      	beq.n	80057f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f893 	bl	8006910 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f88f 	bl	8006910 <USBD_LL_StallEP>
 80057f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057f4:	e040      	b.n	8005878 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fc3e 	bl	800607a <USBD_CtlError>
              break;
 80057fe:	e03b      	b.n	8005878 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	885b      	ldrh	r3, [r3, #2]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d136      	bne.n	8005876 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005812:	7bbb      	ldrb	r3, [r7, #14]
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 f899 	bl	800694e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fcf7 	bl	8006210 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fde2 	bl	80053f0 <USBD_CoreFindEP>
 800582c:	4603      	mov	r3, r0
 800582e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005830:	7b7b      	ldrb	r3, [r7, #13]
 8005832:	2bff      	cmp	r3, #255	; 0xff
 8005834:	d01f      	beq.n	8005876 <USBD_StdEPReq+0x1c6>
 8005836:	7b7b      	ldrb	r3, [r7, #13]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11c      	bne.n	8005876 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800583c:	7b7a      	ldrb	r2, [r7, #13]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005844:	7b7a      	ldrb	r2, [r7, #13]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	32ae      	adds	r2, #174	; 0xae
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005854:	7b7a      	ldrb	r2, [r7, #13]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	32ae      	adds	r2, #174	; 0xae
 800585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800586a:	e004      	b.n	8005876 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fc03 	bl	800607a <USBD_CtlError>
              break;
 8005874:	e000      	b.n	8005878 <USBD_StdEPReq+0x1c8>
              break;
 8005876:	bf00      	nop
          }
          break;
 8005878:	e0ab      	b.n	80059d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d002      	beq.n	800588c <USBD_StdEPReq+0x1dc>
 8005886:	2b03      	cmp	r3, #3
 8005888:	d032      	beq.n	80058f0 <USBD_StdEPReq+0x240>
 800588a:	e097      	b.n	80059bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <USBD_StdEPReq+0x1f2>
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d004      	beq.n	80058a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbed 	bl	800607a <USBD_CtlError>
                break;
 80058a0:	e091      	b.n	80059c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da0b      	bge.n	80058c2 <USBD_StdEPReq+0x212>
 80058aa:	7bbb      	ldrb	r3, [r7, #14]
 80058ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	3310      	adds	r3, #16
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	e00b      	b.n	80058da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	3304      	adds	r3, #4
 80058da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2202      	movs	r2, #2
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fc37 	bl	800615c <USBD_CtlSendData>
              break;
 80058ee:	e06a      	b.n	80059c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da11      	bge.n	800591c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3324      	adds	r3, #36	; 0x24
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d117      	bne.n	8005942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fbb0 	bl	800607a <USBD_CtlError>
                  break;
 800591a:	e054      	b.n	80059c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d104      	bne.n	8005942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb9d 	bl	800607a <USBD_CtlError>
                  break;
 8005940:	e041      	b.n	80059c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da0b      	bge.n	8005962 <USBD_StdEPReq+0x2b2>
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	3310      	adds	r3, #16
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	3304      	adds	r3, #4
 8005960:	e00b      	b.n	800597a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	3304      	adds	r3, #4
 800597a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <USBD_StdEPReq+0x2d8>
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d103      	bne.n	8005990 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e00e      	b.n	80059ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fff9 	bl	800698c <USBD_LL_IsStallEP>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e002      	b.n	80059ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2202      	movs	r2, #2
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fbd1 	bl	800615c <USBD_CtlSendData>
              break;
 80059ba:	e004      	b.n	80059c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fb5b 	bl	800607a <USBD_CtlError>
              break;
 80059c4:	bf00      	nop
          }
          break;
 80059c6:	e004      	b.n	80059d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fb55 	bl	800607a <USBD_CtlError>
          break;
 80059d0:	bf00      	nop
      }
      break;
 80059d2:	e005      	b.n	80059e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb4f 	bl	800607a <USBD_CtlError>
      break;
 80059dc:	e000      	b.n	80059e0 <USBD_StdEPReq+0x330>
      break;
 80059de:	bf00      	nop
  }

  return ret;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	885b      	ldrh	r3, [r3, #2]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	f200 8128 	bhi.w	8005c62 <USBD_GetDescriptor+0x276>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBD_GetDescriptor+0x2c>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005c63 	.word	0x08005c63
 8005a28:	08005c63 	.word	0x08005c63
 8005a2c:	08005c03 	.word	0x08005c03
 8005a30:	08005c2f 	.word	0x08005c2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	7c12      	ldrb	r2, [r2, #16]
 8005a40:	f107 0108 	add.w	r1, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
      break;
 8005a4a:	e112      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c1b      	ldrb	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f107 0208 	add.w	r2, r7, #8
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a6e:	e100      	b.n	8005c72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f107 0208 	add.w	r2, r7, #8
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]
      break;
 8005a8a:	e0f2      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	f200 80ac 	bhi.w	8005bf0 <USBD_GetDescriptor+0x204>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <USBD_GetDescriptor+0xb4>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005bbd 	.word	0x08005bbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	7c12      	ldrb	r2, [r2, #16]
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ada:	e091      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 facb 	bl	800607a <USBD_CtlError>
            err++;
 8005ae4:	7afb      	ldrb	r3, [r7, #11]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aea:	e089      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7c12      	ldrb	r2, [r2, #16]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0e:	e077      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fab1 	bl	800607a <USBD_CtlError>
            err++;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1e:	e06f      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7c12      	ldrb	r2, [r2, #16]
 8005b38:	f107 0108 	add.w	r1, r7, #8
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b42:	e05d      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa97 	bl	800607a <USBD_CtlError>
            err++;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	72fb      	strb	r3, [r7, #11]
          break;
 8005b52:	e055      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	7c12      	ldrb	r2, [r2, #16]
 8005b6c:	f107 0108 	add.w	r1, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b76:	e043      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa7d 	bl	800607a <USBD_CtlError>
            err++;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	3301      	adds	r3, #1
 8005b84:	72fb      	strb	r3, [r7, #11]
          break;
 8005b86:	e03b      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	7c12      	ldrb	r2, [r2, #16]
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005baa:	e029      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa63 	bl	800607a <USBD_CtlError>
            err++;
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bba:	e021      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7c12      	ldrb	r2, [r2, #16]
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bde:	e00f      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa49 	bl	800607a <USBD_CtlError>
            err++;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	3301      	adds	r3, #1
 8005bec:	72fb      	strb	r3, [r7, #11]
          break;
 8005bee:	e007      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa41 	bl	800607a <USBD_CtlError>
          err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005bfe:	bf00      	nop
      }
      break;
 8005c00:	e037      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7c1b      	ldrb	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f107 0208 	add.w	r2, r7, #8
 8005c16:	4610      	mov	r0, r2
 8005c18:	4798      	blx	r3
 8005c1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c1c:	e029      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa2a 	bl	800607a <USBD_CtlError>
        err++;
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c2c:	e021      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	4610      	mov	r0, r2
 8005c44:	4798      	blx	r3
 8005c46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	2207      	movs	r2, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c50:	e00f      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa10 	bl	800607a <USBD_CtlError>
        err++;
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c60:	e007      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa08 	bl	800607a <USBD_CtlError>
      err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	bf00      	nop
  }

  if (err != 0U)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11e      	bne.n	8005cb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	88db      	ldrh	r3, [r3, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d016      	beq.n	8005cae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88da      	ldrh	r2, [r3, #6]
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa5d 	bl	800615c <USBD_CtlSendData>
 8005ca2:	e009      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f9e7 	bl	800607a <USBD_CtlError>
 8005cac:	e004      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 faae 	bl	8006210 <USBD_CtlSendStatus>
 8005cb4:	e000      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    return;
 8005cb6:	bf00      	nop
  }
}
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	889b      	ldrh	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d131      	bne.n	8005d36 <USBD_SetAddress+0x76>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d12d      	bne.n	8005d36 <USBD_SetAddress+0x76>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	885b      	ldrh	r3, [r3, #2]
 8005cde:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce0:	d829      	bhi.n	8005d36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	885b      	ldrh	r3, [r3, #2]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d104      	bne.n	8005d04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9bc 	bl	800607a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	e01d      	b.n	8005d40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fe67 	bl	80069e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa7a 	bl	8006210 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2a:	e009      	b.n	8005d40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d34:	e004      	b.n	8005d40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f99e 	bl	800607a <USBD_CtlError>
  }
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	885b      	ldrh	r3, [r3, #2]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b4e      	ldr	r3, [pc, #312]	; (8005e98 <USBD_SetConfig+0x150>)
 8005d5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d60:	4b4d      	ldr	r3, [pc, #308]	; (8005e98 <USBD_SetConfig+0x150>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d905      	bls.n	8005d74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f985 	bl	800607a <USBD_CtlError>
    return USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e08c      	b.n	8005e8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d002      	beq.n	8005d86 <USBD_SetConfig+0x3e>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d029      	beq.n	8005dd8 <USBD_SetConfig+0x90>
 8005d84:	e075      	b.n	8005e72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d86:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <USBD_SetConfig+0x150>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d8e:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <USBD_SetConfig+0x150>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d98:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <USBD_SetConfig+0x150>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fe ffe7 	bl	8004d72 <USBD_SetClassConfig>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f962 	bl	800607a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005dbe:	e065      	b.n	8005e8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fa25 	bl	8006210 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dce:	e05d      	b.n	8005e8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fa1d 	bl	8006210 <USBD_CtlSendStatus>
      break;
 8005dd6:	e059      	b.n	8005e8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <USBD_SetConfig+0x150>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d112      	bne.n	8005e06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005de8:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <USBD_SetConfig+0x150>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005df2:	4b29      	ldr	r3, [pc, #164]	; (8005e98 <USBD_SetConfig+0x150>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fe ffd6 	bl	8004daa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa06 	bl	8006210 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e04:	e042      	b.n	8005e8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <USBD_SetConfig+0x150>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d02a      	beq.n	8005e6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fe ffc4 	bl	8004daa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e22:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <USBD_SetConfig+0x150>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <USBD_SetConfig+0x150>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fe ff9d 	bl	8004d72 <USBD_SetClassConfig>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f918 	bl	800607a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fe ffa9 	bl	8004daa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e60:	e014      	b.n	8005e8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9d4 	bl	8006210 <USBD_CtlSendStatus>
      break;
 8005e68:	e010      	b.n	8005e8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f9d0 	bl	8006210 <USBD_CtlSendStatus>
      break;
 8005e70:	e00c      	b.n	8005e8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f900 	bl	800607a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <USBD_SetConfig+0x150>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fe ff92 	bl	8004daa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e86:	2303      	movs	r3, #3
 8005e88:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8a:	bf00      	nop
  }

  return ret;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	2000010c 	.word	0x2000010c

08005e9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	88db      	ldrh	r3, [r3, #6]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d004      	beq.n	8005eb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8e2 	bl	800607a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005eb6:	e023      	b.n	8005f00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	dc02      	bgt.n	8005eca <USBD_GetConfig+0x2e>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dc03      	bgt.n	8005ed0 <USBD_GetConfig+0x34>
 8005ec8:	e015      	b.n	8005ef6 <USBD_GetConfig+0x5a>
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d00b      	beq.n	8005ee6 <USBD_GetConfig+0x4a>
 8005ece:	e012      	b.n	8005ef6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	2201      	movs	r2, #1
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f93c 	bl	800615c <USBD_CtlSendData>
        break;
 8005ee4:	e00c      	b.n	8005f00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	2201      	movs	r2, #1
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f934 	bl	800615c <USBD_CtlSendData>
        break;
 8005ef4:	e004      	b.n	8005f00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8be 	bl	800607a <USBD_CtlError>
        break;
 8005efe:	bf00      	nop
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d81e      	bhi.n	8005f5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	88db      	ldrh	r3, [r3, #6]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d004      	beq.n	8005f32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8a5 	bl	800607a <USBD_CtlError>
        break;
 8005f30:	e01a      	b.n	8005f68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f043 0202 	orr.w	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	330c      	adds	r3, #12
 8005f52:	2202      	movs	r2, #2
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f900 	bl	800615c <USBD_CtlSendData>
      break;
 8005f5c:	e004      	b.n	8005f68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f88a 	bl	800607a <USBD_CtlError>
      break;
 8005f66:	bf00      	nop
  }
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	885b      	ldrh	r3, [r3, #2]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d107      	bne.n	8005f92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f940 	bl	8006210 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f90:	e013      	b.n	8005fba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d10b      	bne.n	8005fb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	889b      	ldrh	r3, [r3, #4]
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f930 	bl	8006210 <USBD_CtlSendStatus>
}
 8005fb0:	e003      	b.n	8005fba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f860 	bl	800607a <USBD_CtlError>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d80b      	bhi.n	8005ff2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	885b      	ldrh	r3, [r3, #2]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10c      	bne.n	8005ffc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f910 	bl	8006210 <USBD_CtlSendStatus>
      }
      break;
 8005ff0:	e004      	b.n	8005ffc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f840 	bl	800607a <USBD_CtlError>
      break;
 8005ffa:	e000      	b.n	8005ffe <USBD_ClrFeature+0x3c>
      break;
 8005ffc:	bf00      	nop
  }
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fa41 	bl	80054b8 <SWAPBYTE>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fa34 	bl	80054b8 <SWAPBYTE>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff fa27 	bl	80054b8 <SWAPBYTE>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	80da      	strh	r2, [r3, #6]
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc42 	bl	8006910 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fc3e 	bl	8006910 <USBD_LL_StallEP>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d036      	beq.n	8006120 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80060b6:	6938      	ldr	r0, [r7, #16]
 80060b8:	f000 f836 	bl	8006128 <USBD_GetLen>
 80060bc:	4603      	mov	r3, r0
 80060be:	3301      	adds	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	4413      	add	r3, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	3301      	adds	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	4413      	add	r3, r2
 80060e2:	2203      	movs	r2, #3
 80060e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	3301      	adds	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060ec:	e013      	b.n	8006116 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	4413      	add	r3, r2
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3301      	adds	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	3301      	adds	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4413      	add	r3, r2
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	3301      	adds	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e7      	bne.n	80060ee <USBD_GetString+0x52>
 800611e:	e000      	b.n	8006122 <USBD_GetString+0x86>
    return;
 8006120:	bf00      	nop
  }
}
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006138:	e005      	b.n	8006146 <USBD_GetLen+0x1e>
  {
    len++;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	3301      	adds	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3301      	adds	r3, #1
 8006144:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f5      	bne.n	800613a <USBD_GetLen+0x12>
  }

  return len;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2202      	movs	r2, #2
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	2100      	movs	r1, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fc4d 	bl	8006a22 <USBD_LL_Transmit>

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	2100      	movs	r1, #0
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fc3c 	bl	8006a22 <USBD_LL_Transmit>

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2203      	movs	r2, #3
 80061c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	2100      	movs	r1, #0
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fc40 	bl	8006a64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fc2f 	bl	8006a64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2204      	movs	r2, #4
 800621c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006220:	2300      	movs	r3, #0
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fbfb 	bl	8006a22 <USBD_LL_Transmit>

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2205      	movs	r2, #5
 8006242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006246:	2300      	movs	r3, #0
 8006248:	2200      	movs	r2, #0
 800624a:	2100      	movs	r1, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fc09 	bl	8006a64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006260:	2200      	movs	r2, #0
 8006262:	4912      	ldr	r1, [pc, #72]	; (80062ac <MX_USB_DEVICE_Init+0x50>)
 8006264:	4812      	ldr	r0, [pc, #72]	; (80062b0 <MX_USB_DEVICE_Init+0x54>)
 8006266:	f7fe fd07 	bl	8004c78 <USBD_Init>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006270:	f7fa fa90 	bl	8000794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006274:	490f      	ldr	r1, [pc, #60]	; (80062b4 <MX_USB_DEVICE_Init+0x58>)
 8006276:	480e      	ldr	r0, [pc, #56]	; (80062b0 <MX_USB_DEVICE_Init+0x54>)
 8006278:	f7fe fd2e 	bl	8004cd8 <USBD_RegisterClass>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006282:	f7fa fa87 	bl	8000794 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006286:	490c      	ldr	r1, [pc, #48]	; (80062b8 <MX_USB_DEVICE_Init+0x5c>)
 8006288:	4809      	ldr	r0, [pc, #36]	; (80062b0 <MX_USB_DEVICE_Init+0x54>)
 800628a:	f7fe fcdb 	bl	8004c44 <USBD_CUSTOM_HID_RegisterInterface>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006294:	f7fa fa7e 	bl	8000794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006298:	4805      	ldr	r0, [pc, #20]	; (80062b0 <MX_USB_DEVICE_Init+0x54>)
 800629a:	f7fe fd53 	bl	8004d44 <USBD_Start>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062a4:	f7fa fa76 	bl	8000794 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062a8:	bf00      	nop
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000009c 	.word	0x2000009c
 80062b0:	20000110 	.word	0x20000110
 80062b4:	2000000c 	.word	0x2000000c
 80062b8:	2000008c 	.word	0x2000008c

080062bc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80062d0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	460a      	mov	r2, r1
 80062e6:	71fb      	strb	r3, [r7, #7]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80062ec:	4806      	ldr	r0, [pc, #24]	; (8006308 <CUSTOM_HID_OutEvent_FS+0x2c>)
 80062ee:	f7fe fc47 	bl	8004b80 <USBD_CUSTOM_HID_ReceivePacket>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	e000      	b.n	8006300 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 80062fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000110 	.word	0x20000110

0800630c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2212      	movs	r2, #18
 800631c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800631e:	4b03      	ldr	r3, [pc, #12]	; (800632c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	200000b8 	.word	0x200000b8

08006330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2204      	movs	r2, #4
 8006340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	200000cc 	.word	0x200000cc

08006354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4907      	ldr	r1, [pc, #28]	; (8006388 <USBD_FS_ProductStrDescriptor+0x34>)
 800636a:	4808      	ldr	r0, [pc, #32]	; (800638c <USBD_FS_ProductStrDescriptor+0x38>)
 800636c:	f7ff fe96 	bl	800609c <USBD_GetString>
 8006370:	e004      	b.n	800637c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4904      	ldr	r1, [pc, #16]	; (8006388 <USBD_FS_ProductStrDescriptor+0x34>)
 8006376:	4805      	ldr	r0, [pc, #20]	; (800638c <USBD_FS_ProductStrDescriptor+0x38>)
 8006378:	f7ff fe90 	bl	800609c <USBD_GetString>
  }
  return USBD_StrDesc;
 800637c:	4b02      	ldr	r3, [pc, #8]	; (8006388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200003ec 	.word	0x200003ec
 800638c:	08006ba0 	.word	0x08006ba0

08006390 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	4904      	ldr	r1, [pc, #16]	; (80063b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80063a0:	4804      	ldr	r0, [pc, #16]	; (80063b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80063a2:	f7ff fe7b 	bl	800609c <USBD_GetString>
  return USBD_StrDesc;
 80063a6:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200003ec 	.word	0x200003ec
 80063b4:	08006bc0 	.word	0x08006bc0

080063b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	221a      	movs	r2, #26
 80063c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80063ca:	f000 f843 	bl	8006454 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80063ce:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	200000d0 	.word	0x200000d0

080063dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4907      	ldr	r1, [pc, #28]	; (8006410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80063f2:	4808      	ldr	r0, [pc, #32]	; (8006414 <USBD_FS_ConfigStrDescriptor+0x38>)
 80063f4:	f7ff fe52 	bl	800609c <USBD_GetString>
 80063f8:	e004      	b.n	8006404 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	4904      	ldr	r1, [pc, #16]	; (8006410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80063fe:	4805      	ldr	r0, [pc, #20]	; (8006414 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006400:	f7ff fe4c 	bl	800609c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200003ec 	.word	0x200003ec
 8006414:	08006bd4 	.word	0x08006bd4

08006418 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	4907      	ldr	r1, [pc, #28]	; (800644c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800642e:	4808      	ldr	r0, [pc, #32]	; (8006450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006430:	f7ff fe34 	bl	800609c <USBD_GetString>
 8006434:	e004      	b.n	8006440 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4904      	ldr	r1, [pc, #16]	; (800644c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800643c:	f7ff fe2e 	bl	800609c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006440:	4b02      	ldr	r3, [pc, #8]	; (800644c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200003ec 	.word	0x200003ec
 8006450:	08006be8 	.word	0x08006be8

08006454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <Get_SerialNum+0x44>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006460:	4b0e      	ldr	r3, [pc, #56]	; (800649c <Get_SerialNum+0x48>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006466:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <Get_SerialNum+0x4c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800647a:	2208      	movs	r2, #8
 800647c:	4909      	ldr	r1, [pc, #36]	; (80064a4 <Get_SerialNum+0x50>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f814 	bl	80064ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006484:	2204      	movs	r2, #4
 8006486:	4908      	ldr	r1, [pc, #32]	; (80064a8 <Get_SerialNum+0x54>)
 8006488:	68b8      	ldr	r0, [r7, #8]
 800648a:	f000 f80f 	bl	80064ac <IntToUnicode>
  }
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	1fff7a10 	.word	0x1fff7a10
 800649c:	1fff7a14 	.word	0x1fff7a14
 80064a0:	1fff7a18 	.word	0x1fff7a18
 80064a4:	200000d2 	.word	0x200000d2
 80064a8:	200000e2 	.word	0x200000e2

080064ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
 80064c2:	e027      	b.n	8006514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	0f1b      	lsrs	r3, r3, #28
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d80b      	bhi.n	80064e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	0f1b      	lsrs	r3, r3, #28
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	4619      	mov	r1, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	440b      	add	r3, r1
 80064dc:	3230      	adds	r2, #48	; 0x30
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e00a      	b.n	80064fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	0f1b      	lsrs	r3, r3, #28
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4619      	mov	r1, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	440b      	add	r3, r1
 80064f4:	3237      	adds	r2, #55	; 0x37
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	3301      	adds	r3, #1
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	3301      	adds	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
 8006514:	7dfa      	ldrb	r2, [r7, #23]
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	429a      	cmp	r2, r3
 800651a:	d3d3      	bcc.n	80064c4 <IntToUnicode+0x18>
  }
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	60da      	str	r2, [r3, #12]
 8006542:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654c:	d13a      	bne.n	80065c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6313      	str	r3, [r2, #48]	; 0x30
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = DATA____USB_OITG_FS_D__Pin|DATA____USB_OTG_FS_D__Pin;
 800656a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800656e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006570:	2302      	movs	r3, #2
 8006572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006578:	2303      	movs	r3, #3
 800657a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800657c:	230a      	movs	r3, #10
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	4619      	mov	r1, r3
 8006586:	4812      	ldr	r0, [pc, #72]	; (80065d0 <HAL_PCD_MspInit+0xa4>)
 8006588:	f7fa fb4a 	bl	8000c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	6353      	str	r3, [r2, #52]	; 0x34
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 80065a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065a6:	6453      	str	r3, [r2, #68]	; 0x44
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <HAL_PCD_MspInit+0xa0>)
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80065b4:	2200      	movs	r2, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	2043      	movs	r0, #67	; 0x43
 80065ba:	f7fa fafa 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80065be:	2043      	movs	r0, #67	; 0x43
 80065c0:	f7fa fb13 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80065c4:	bf00      	nop
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40020000 	.word	0x40020000

080065d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fbf7 	bl	8004dde <USBD_LL_SetupStage>
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	4619      	mov	r1, r3
 8006622:	f7fe fc31 	bl	8004e88 <USBD_LL_DataOutStage>
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	334c      	adds	r3, #76	; 0x4c
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	4619      	mov	r1, r3
 8006656:	f7fe fcca 	bl	8004fee <USBD_LL_DataInStage>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fdfe 	bl	8005272 <USBD_LL_SOF>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006686:	2301      	movs	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
 8006696:	e008      	b.n	80066aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d102      	bne.n	80066a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e001      	b.n	80066aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80066a6:	f7fa f875 	bl	8000794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80066b0:	7bfa      	ldrb	r2, [r7, #15]
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe fd9e 	bl	80051f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fd46 	bl	8005152 <USBD_LL_Reset>
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fd99 	bl	8005216 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <HAL_PCD_SuspendCallback+0x48>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	4a03      	ldr	r2, [pc, #12]	; (8006718 <HAL_PCD_SuspendCallback+0x48>)
 800670a:	f043 0306 	orr.w	r3, r3, #6
 800670e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed00 	.word	0xe000ed00

0800671c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fd89 	bl	8005242 <USBD_LL_Resume>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fde1 	bl	8005316 <USBD_LL_IsoOUTIncomplete>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fd9d 	bl	80052b2 <USBD_LL_IsoINIncomplete>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fdf3 	bl	800537a <USBD_LL_DevConnected>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fdf0 	bl	8005390 <USBD_LL_DevDisconnected>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d13c      	bne.n	8006842 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80067c8:	4a20      	ldr	r2, [pc, #128]	; (800684c <USBD_LL_Init+0x94>)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1e      	ldr	r2, [pc, #120]	; (800684c <USBD_LL_Init+0x94>)
 80067d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067d8:	4b1c      	ldr	r3, [pc, #112]	; (800684c <USBD_LL_Init+0x94>)
 80067da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80067de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <USBD_LL_Init+0x94>)
 80067e2:	2204      	movs	r2, #4
 80067e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80067e6:	4b19      	ldr	r3, [pc, #100]	; (800684c <USBD_LL_Init+0x94>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <USBD_LL_Init+0x94>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <USBD_LL_Init+0x94>)
 80067f4:	2202      	movs	r2, #2
 80067f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80067f8:	4b14      	ldr	r3, [pc, #80]	; (800684c <USBD_LL_Init+0x94>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <USBD_LL_Init+0x94>)
 8006800:	2200      	movs	r2, #0
 8006802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <USBD_LL_Init+0x94>)
 8006806:	2200      	movs	r2, #0
 8006808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <USBD_LL_Init+0x94>)
 800680c:	2200      	movs	r2, #0
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <USBD_LL_Init+0x94>)
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006816:	480d      	ldr	r0, [pc, #52]	; (800684c <USBD_LL_Init+0x94>)
 8006818:	f7fa fbb7 	bl	8000f8a <HAL_PCD_Init>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006822:	f7f9 ffb7 	bl	8000794 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <USBD_LL_Init+0x94>)
 800682a:	f7fb fdf6 	bl	800241a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800682e:	2240      	movs	r2, #64	; 0x40
 8006830:	2100      	movs	r1, #0
 8006832:	4806      	ldr	r0, [pc, #24]	; (800684c <USBD_LL_Init+0x94>)
 8006834:	f7fb fdaa 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006838:	2280      	movs	r2, #128	; 0x80
 800683a:	2101      	movs	r1, #1
 800683c:	4803      	ldr	r0, [pc, #12]	; (800684c <USBD_LL_Init+0x94>)
 800683e:	f7fb fda5 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	200005ec 	.word	0x200005ec

08006850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006866:	4618      	mov	r0, r3
 8006868:	f7fa fcac 	bl	80011c4 <HAL_PCD_Start>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f930 	bl	8006ad8 <USBD_Get_USB_Status>
 8006878:	4603      	mov	r3, r0
 800687a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800687c:	7bbb      	ldrb	r3, [r7, #14]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	4608      	mov	r0, r1
 8006890:	4611      	mov	r1, r2
 8006892:	461a      	mov	r2, r3
 8006894:	4603      	mov	r3, r0
 8006896:	70fb      	strb	r3, [r7, #3]
 8006898:	460b      	mov	r3, r1
 800689a:	70bb      	strb	r3, [r7, #2]
 800689c:	4613      	mov	r3, r2
 800689e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80068ae:	78bb      	ldrb	r3, [r7, #2]
 80068b0:	883a      	ldrh	r2, [r7, #0]
 80068b2:	78f9      	ldrb	r1, [r7, #3]
 80068b4:	f7fb f97d 	bl	8001bb2 <HAL_PCD_EP_Open>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f90a 	bl	8006ad8 <USBD_Get_USB_Status>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fb f9c6 	bl	8001c82 <HAL_PCD_EP_Close>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f8eb 	bl	8006ad8 <USBD_Get_USB_Status>
 8006902:	4603      	mov	r3, r0
 8006904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006906:	7bbb      	ldrb	r3, [r7, #14]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f7fb fa86 	bl	8001e40 <HAL_PCD_EP_SetStall>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f8cc 	bl	8006ad8 <USBD_Get_USB_Status>
 8006940:	4603      	mov	r3, r0
 8006942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006944:	7bbb      	ldrb	r3, [r7, #14]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fb facb 	bl	8001f08 <HAL_PCD_EP_ClrStall>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 f8ad 	bl	8006ad8 <USBD_Get_USB_Status>
 800697e:	4603      	mov	r3, r0
 8006980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006982:	7bbb      	ldrb	r3, [r7, #14]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800699e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80069a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	da0b      	bge.n	80069c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	333e      	adds	r3, #62	; 0x3e
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	e00b      	b.n	80069d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80069d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fb f8b0 	bl	8001b68 <HAL_PCD_SetAddress>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f862 	bl	8006ad8 <USBD_Get_USB_Status>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a40:	7af9      	ldrb	r1, [r7, #11]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	f7fb f9b1 	bl	8001dac <HAL_PCD_EP_Transmit>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f841 	bl	8006ad8 <USBD_Get_USB_Status>
 8006a56:	4603      	mov	r3, r0
 8006a58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	460b      	mov	r3, r1
 8006a72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a82:	7af9      	ldrb	r1, [r7, #11]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	f7fb f945 	bl	8001d16 <HAL_PCD_EP_Receive>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f820 	bl	8006ad8 <USBD_Get_USB_Status>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <USBD_static_malloc+0x18>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000af8 	.word	0x20000af8

08006ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d817      	bhi.n	8006b1c <USBD_Get_USB_Status+0x44>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBD_Get_USB_Status+0x1c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b0b 	.word	0x08006b0b
 8006afc:	08006b11 	.word	0x08006b11
 8006b00:	08006b17 	.word	0x08006b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
    break;
 8006b08:	e00b      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b0e:	e008      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
    break;
 8006b14:	e005      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
    break;
 8006b1a:	e002      	b.n	8006b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b20:	bf00      	nop
  }
  return usb_status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4d0d      	ldr	r5, [pc, #52]	; (8006b68 <__libc_init_array+0x38>)
 8006b34:	4c0d      	ldr	r4, [pc, #52]	; (8006b6c <__libc_init_array+0x3c>)
 8006b36:	1b64      	subs	r4, r4, r5
 8006b38:	10a4      	asrs	r4, r4, #2
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	4d0b      	ldr	r5, [pc, #44]	; (8006b70 <__libc_init_array+0x40>)
 8006b42:	4c0c      	ldr	r4, [pc, #48]	; (8006b74 <__libc_init_array+0x44>)
 8006b44:	f000 f820 	bl	8006b88 <_init>
 8006b48:	1b64      	subs	r4, r4, r5
 8006b4a:	10a4      	asrs	r4, r4, #2
 8006b4c:	2600      	movs	r6, #0
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	08006c18 	.word	0x08006c18
 8006b6c:	08006c18 	.word	0x08006c18
 8006b70:	08006c18 	.word	0x08006c18
 8006b74:	08006c1c 	.word	0x08006c1c

08006b78 <memset>:
 8006b78:	4402      	add	r2, r0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d100      	bne.n	8006b82 <memset+0xa>
 8006b80:	4770      	bx	lr
 8006b82:	f803 1b01 	strb.w	r1, [r3], #1
 8006b86:	e7f9      	b.n	8006b7c <memset+0x4>

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
